73 72
META script_type_update

/// Skeleton position & rotation
VEC3 camPos = fe3d:camera_get_position()
DEC yaw = fe3d:camera_get_yaw()
NEG yaw
INCR yaw 90.0
DECR camPos.y 2.6
fe3d:model_set_position("player", camPos.x, camPos.y, camPos.z)
fe3d:model_set_rotation("player", 0.0, yaw, 0.0)

/// Walking animation
BOOL isWalkPlaying = fe3d:model_is_animation_playing("walk", "player")
IF _toolPlaying IS <true>:
    IF isWalkPlaying IS <true>:
        fe3d:model_fade_animation("walk", "player", 1)
ELSE:
    IF _isWalking IS <true> AND isWalkPlaying IS <false>:
        fe3d:model_start_animation("walk", "player", -1)
    ELIF _isWalking IS <false> AND isWalkPlaying IS <true>:
        fe3d:model_fade_animation("walk", "player", 1)
    /// Update running animation
    IF isWalkPlaying IS <true>:
        DEC speed = 1.0
        IF _isRunning IS <true>:
            MUL speed 2.0
        fe3d:model_set_animation_speed("walk", "player", speed)

/// Retrieve equipped item
STR itemID = _inventory[_equipIndex]

/// Determine animation type
STR animID = ""
IF _equipIndex IS 0:
    EDIT animID = "sword_hit"
    DEC toolOffset = 1.5
ELIF _equipIndex IS 1:
    EDIT animID = "pickaxe_mine"
    DEC toolOffset = 1.25
ELIF _equipIndex IS 2:
    EDIT animID = "axe_cut"
    DEC toolOffset = 1.0
ELIF _equipIndex IS 3:
    EDIT animID = "shovel_dig"
    DEC toolOffset = 1.0
ELIF _equipIndex IS 4:
    EDIT animID = "hoe_plow"
ELIF _equipIndex IS 5:
    EDIT animID = "scythe_reap"
ELIF _equipIndex IS 6:
    EDIT animID = "hammer_build"
ELIF _equipIndex IS 8:
    EDIT animID = "fishrod_throw"

/// Update tool position, rotation, animation if equipped AND no animation playing
IF itemID NOT "" AND animID NOT "" AND _toolPlaying IS <false>:
    DECR yaw 20.0
    DEC sinRot = math:sin(yaw)
    DEC cosRot = math:cos(yaw)
    MUL sinRot 0.8
    MUL cosRot 0.8
    VEC3 itemPos = camPos
    INCR itemPos.x sinRot
    INCR itemPos.z cosRot
    INCR itemPos.y toolOffset
    fe3d:model_set_position(itemID, itemPos.x, itemPos.y, itemPos.z)
    /// Rotation
    VEC3 itemRot = fe3d:model_get_rotation(itemID)
    EDIT itemRot.y = fe3d:camera_get_yaw()
    NEG itemRot.y
    INCR itemRot.y 90.0
    fe3d:model_set_rotation(itemID, itemRot.x, itemRot.y, itemRot.z)
    /// Animation
    IF animID NOT "" AND _isJumping IS <false> AND _isFalling IS <false>:
        BOOL lmb = fe3d:input_is_mouse_pressed("BUTTON_LEFT")
        BOOL isItemPlaying = fe3d:model_is_animation_playing(animID, itemID)
        IF lmb IS <true> AND isItemPlaying IS <false>:
            fe3d:model_start_animation(animID, itemID, 1)

/// Update tool animations status
STR modelID = _inventory[_equipIndex]
EDIT _wasSwordPlaying = _swordPlaying
EDIT _wasPickaxePlaying = _pickaxePlaying
EDIT _wasAxePlaying = _axePlaying
EDIT _wasShovelPlaying = _shovelPlaying
EDIT _wasHoePlaying = _hoePlaying
EDIT _wasScythePlaying = _scythePlaying
EDIT _wasHammerPlaying = _hammerPlaying
EDIT _wasFishrodPlaying = _fishrodPlaying
EDIT _swordPlaying = fe3d:model_is_animation_playing("sword_hit", modelID)
EDIT _pickaxePlaying = fe3d:model_is_animation_playing("pickaxe_mine", modelID)
EDIT _axePlaying = fe3d:model_is_animation_playing("axe_cut", modelID)
EDIT _shovelPlaying = fe3d:model_is_animation_playing("shovel_dig", modelID)
EDIT _hoePlaying = fe3d:model_is_animation_playing("sword_hit", modelID)
EDIT _scythePlaying = fe3d:model_is_animation_playing("sword_hit", modelID)
EDIT _hammerPlaying = fe3d:model_is_animation_playing("sword_hit", modelID)
EDIT _fishrodPlaying = fe3d:model_is_animation_playing("sword_hit", modelID)
