46 22
META script_type_update

/// Check if a built building is selected
INT listSize = misc:get_list_size("_buildNames")
INT index = 0
STR hoveredID = ""
DEC distance = 0.0
LOOP:
    IF index IS listSize:
        BREAK
    EDIT hoveredID = fe3d:raycast_into_model(_buildNames[index], "", <true>)
    EDIT distance = fe3d:raycast_into_model_distance(_buildNames[index], "", <true>)
    IF distance IS -1.0:
        EDIT distance = 1000.0
    IF hoveredID NOT "":
        BREAK
    INCR index 1

/// Retrieve max height
IF hoveredID NOT "":
    DEC height = fe3d:model_get_max_height(hoveredID)
    STR idPart = misc:get_string_part(hoveredID, 0, 2)
    IF idPart IS "sm":
        INT hoveredIndex = 0
        VEC3 size = fe3d:aabb_get_size("small_house_display_back")
    ELIF idPart IS "me":
        INT hoveredIndex = 1
        VEC3 size = fe3d:aabb_get_size("medium_house_display_back")
    ELIF idPart IS "bi":
        INT hoveredIndex = 2
        VEC3 size = fe3d:aabb_get_size("big_house_display_back")
    ELIF idPart IS "st":
        INT hoveredIndex = 3
        VEC3 size = fe3d:aabb_get_size("storage_display_main")
    ELIF idPart IS "we":
        INT hoveredIndex = 4
        VEC3 size = fe3d:aabb_get_size("well_display_well")
    ELIF idPart IS "pe":
        INT hoveredIndex = 5
        VEC3 size = fe3d:aabb_get_size("pen_display_front")
    ELIF idPart IS "mi":
        INT hoveredIndex = 6
        VEC3 size = fe3d:aabb_get_size("mill_display_mill")
    ELIF idPart IS "ch":
        INT hoveredIndex = 7
        VEC3 size = fe3d:aabb_get_size("church_display_tower")
    ELIF idPart IS "ov":
        INT hoveredIndex = 8
        VEC3 size = fe3d:aabb_get_size("oven_display_oven")

/// Update building process
STR toolID = _inventory[_equipIndex]
fe3d:text_set_visible("build", <false>)
IF toolID IS "hammer_stone" OR toolID IS "hammer_iron":
    /// Check if hovering building
    IF _isInvOpen IS <true> AND hoveredID NOT "":
        /// Calculate price
        INT wp = _buildablesWoodPrice[hoveredIndex]
        INT sp = _buildablesStonePrice[hoveredIndex]
        INT cp = _buildablesClayPrice[hoveredIndex]
        INT ip = _buildablesIronPrice[hoveredIndex]
        DECR wp 1
        DECR sp 1
        DECR cp 1
        DECR ip 1
        BOOL afford1 = (_bag[0] MORE wp AND _bag[1] MORE sp)
        BOOL afford2 = (_bag[2] MORE cp AND _bag[9] MORE ip)
        BOOL canAfford = (afford1 IS <true> AND afford2 IS <true>)
        /// Check if building in reach, not finished, affordable
        IF distance LESS _maxReach AND height LESS size.y AND canAfford IS <true>:
            fe3d:text_set_visible("build", <true>)
            /// Check if player used hammer
            IF _wasHammerPlaying IS <true> AND _isHammerPlaying IS <false>:
                DEC heightIncrease = size.y
                MUL heightIncrease 0.1000001
                INCR height heightIncrease
                fe3d:model_set_max_height(hoveredID, height)
                DECR _bag[0] _buildablesWoodPrice[hoveredIndex]
                DECR _bag[1] _buildablesStonePrice[hoveredIndex]
                DECR _bag[2] _buildablesClayPrice[hoveredIndex]
                DECR _bag[9] _buildablesIronPrice[hoveredIndex]
                /// Check if building is finished
                IF height IS size.y OR height MORE size.y:
                    /// Check if building is a house
                    IF idPart IS "sm" OR idPart IS "me" OR idPart IS "bi":
                        /// Spawn bed
                        STR bedID = misc:concat_strings("bed:", hoveredID)
                        VEC3 bedPos = fe3d:model_get_position(hoveredID)
                        fe3d:model_place(bedID, "bed", bedPos.x, bedPos.y, bedPos.z)
                    /// Check if building is a mill
                    IF idPart IS "mi":
                        /// Start mill animation
                        fe3d:model_start_animation(hoveredID, "mill_rotation", -1)
