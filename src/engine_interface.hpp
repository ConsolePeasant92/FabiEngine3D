#pragma once

#include "mouse_wheel_type.hpp"
#include "mouse_button_type.hpp"
#include "keyboard_key_type.hpp"
#include "direction_type.hpp"
#include "direction_order_type.hpp"
#include "aabb_parent_type.hpp"
#include "networking_client_message.hpp"
#include "networking_server_message.hpp"
#include "mathematics.hpp"
#include "bloom_type.hpp"
#include "reflection_type.hpp"
#include "refraction_type.hpp"
#include "pointlight_shape_type.hpp"
#include "ray.hpp"
#include "speed_type.hpp"
#include "transformation_type.hpp"

#include <array>
#include <vector>
#include <set>
#include <map>
#include <unordered_map>
#include <string>
#include <memory>

using std::min;
using std::max;
using std::reverse;
using std::to_string;
using std::make_shared;
using std::vector;
using std::set;
using std::map;
using std::unordered_map;
using std::pair;
using std::string;
using std::shared_ptr;
using std::array;

class EngineCore;

class EngineInterface final
{
public:
	void inject(shared_ptr<EngineCore> core);

	void application_start();
	void application_stop();

	void sky_create(const string & skyId);
	void sky_delete(const string & skyId);
	void sky_select(const string & skyId);
	void sky_setCubeMaps(const string & skyId, const array<string, 6> & value);
	void sky_setRightCubeMap(const string & skyId, const string & value);
	void sky_setLeftCubeMap(const string & skyId, const string & value);
	void sky_setTopCubeMap(const string & skyId, const string & value);
	void sky_setBottomCubeMap(const string & skyId, const string & value);
	void sky_setBackCubeMap(const string & skyId, const string & value);
	void sky_setFrontCubeMap(const string & skyId, const string & value);
	void sky_setLightness(const string & skyId, float value);
	void sky_setRotation(const string & skyId, const fvec3 & value);
	void sky_rotate(const string & skyId, const fvec3 & value);
	void sky_rotateTo(const string & skyId, const fvec3 & target, float speed);
	void sky_setColor(const string & skyId, const fvec3 & value);
	void sky_setWireframed(const string & skyId, bool value);
	void sky_setWireframeColor(const string & skyId, const fvec3 & value);
	void sky_setRotationOrder(const string & skyId, DirectionOrderType value);

	const vector<string> sky_getIds() const;
	const array<string, 6> & sky_getCubeMapPaths(const string & skyId) const;
	const string & sky_getRightCubeMapPath(const string & skyId) const;
	const string & sky_getLeftCubeMapPath(const string & skyId) const;
	const string & sky_getTopCubeMapPath(const string & skyId) const;
	const string & sky_getBottomCubeMapPath(const string & skyId) const;
	const string & sky_getBackCubeMapPath(const string & skyId) const;
	const string & sky_getFrontCubeMapPath(const string & skyId) const;
	const string sky_getSelectedId() const;
	const fvec3 & sky_getWireframeColor(const string & skyId) const;
	const fvec3 & sky_getColor(const string & skyId) const;
	const fvec3 & sky_getRotation(const string & skyId) const;
	const float sky_getLightness(const string & skyId) const;
	const bool sky_isExisting(const string & skyId) const;
	const bool sky_isWireframed(const string & skyId) const;
	const bool sky_hasRightCubeMap(const string & skyId) const;
	const bool sky_hasLeftCubeMap(const string & skyId) const;
	const bool sky_hasTopCubeMap(const string & skyId) const;
	const bool sky_hasBottomCubeMap(const string & skyId) const;
	const bool sky_hasBackCubeMap(const string & skyId) const;
	const bool sky_hasFrontCubeMap(const string & skyId) const;
	const DirectionOrderType sky_getRotationOrder(const string & skyId) const;

	void terrain_create(const string & terrainId, const string & heightMapPath);
	void terrain_delete(const string & terrainId);
	void terrain_select(const string & terrainId);
	void terrain_setBlendMap(const string & terrainId, const string & value);
	void terrain_setDiffuseMap(const string & terrainId, const string & value);
	void terrain_setRedDiffuseMap(const string & terrainId, const string & value);
	void terrain_setGreenDiffuseMap(const string & terrainId, const string & value);
	void terrain_setBlueDiffuseMap(const string & terrainId, const string & value);
	void terrain_setNormalMap(const string & terrainId, const string & value);
	void terrain_setRedNormalMap(const string & terrainId, const string & value);
	void terrain_setGreenNormalMap(const string & terrainId, const string & value);
	void terrain_setBlueNormalMap(const string & terrainId, const string & value);
	void terrain_setRedTextureRepeat(const string & terrainId, int value);
	void terrain_setGreenTextureRepeat(const string & terrainId, int value);
	void terrain_setBlueTextureRepeat(const string & terrainId, int value);
	void terrain_setMaxHeight(const string & terrainId, float value);
	void terrain_setTextureRepeat(const string & terrainId, int value);
	void terrain_setLightness(const string & terrainId, float value);
	void terrain_setSpecularShininess(const string & terrainId, float value);
	void terrain_setSpecularIntensity(const string & terrainId, float value);
	void terrain_setSpecular(const string & terrainId, bool value);
	void terrain_setShadowed(const string & terrainId, bool value);
	void terrain_setWireframed(const string & terrainId, bool value);
	void terrain_setWireframeColor(const string & terrainId, const fvec3 & value);
	void terrain_setColor(const string & terrainId, const fvec3 & value);
	void terrain_setMinClipPosition(const string & terrainId, const fvec3 & value);
	void terrain_setMaxClipPosition(const string & terrainId, const fvec3 & value);

	const vector<string> terrain_getIds() const;
	const string terrain_getSelectedId() const;
	const string & terrain_getHeightMapPath(const string & terrainId) const;
	const string & terrain_getBlendMapPath(const string & terrainId) const;
	const string & terrain_getDiffuseMapPath(const string & terrainId) const;
	const string & terrain_getRedDiffuseMapPath(const string & terrainId) const;
	const string & terrain_getGreenDiffuseMapPath(const string & terrainId) const;
	const string & terrain_getBlueDiffuseMapPath(const string & terrainId) const;
	const string & terrain_getNormalMapPath(const string & terrainId) const;
	const string & terrain_getRedNormalMapPath(const string & terrainId) const;
	const string & terrain_getGreenNormalMapPath(const string & terrainId) const;
	const string & terrain_getBlueNormalMapPath(const string & terrainId) const;
	const fvec3 & terrain_getWireframeColor(const string & terrainId) const;
	const fvec3 & terrain_getColor(const string & terrainId) const;
	const fvec3 & terrain_getMinClipPosition(const string & terrainId) const;
	const fvec3 & terrain_getMaxClipPosition(const string & terrainId) const;
	const float terrain_getMaxHeight(const string & terrainId) const;
	const float terrain_getLightness(const string & terrainId) const;
	const float terrain_getSize(const string & terrainId) const;
	const float terrain_getPixelHeight(const string & terrainId, float x, float z) const;
	const float terrain_getSpecularShininess(const string & terrainId) const;
	const float terrain_getSpecularIntensity(const string & terrainId) const;
	const int terrain_getTextureRepeat(const string & terrainId) const;
	const int terrain_getRedTextureRepeat(const string & terrainId) const;
	const int terrain_getGreenTextureRepeat(const string & terrainId) const;
	const int terrain_getBlueTextureRepeat(const string & terrainId) const;
	const bool terrain_isExisting(const string & terrainId) const;
	const bool terrain_isSpecular(const string & terrainId) const;
	const bool terrain_isWireframed(const string & terrainId) const;
	const bool terrain_isShadowed(const string & terrainId) const;
	const bool terrain_isInside(const string & terrainId, float x, float z) const;
	const bool terrain_hasBlendMap(const string & terrainId) const;
	const bool terrain_hasDiffuseMap(const string & terrainId) const;
	const bool terrain_hasRedDiffuseMap(const string & terrainId) const;
	const bool terrain_hasGreenDiffuseMap(const string & terrainId) const;
	const bool terrain_hasBlueDiffuseMap(const string & terrainId) const;
	const bool terrain_hasNormalMap(const string & terrainId) const;
	const bool terrain_hasRedNormalMap(const string & terrainId) const;
	const bool terrain_hasGreenNormalMap(const string & terrainId) const;
	const bool terrain_hasBlueNormalMap(const string & terrainId) const;

	void water_create(const string & waterId);
	void water_delete(const string & waterId);
	void water_select(const string & waterId);
	void water_setRippleSpeed(const string & waterId, const fvec2 & value);
	void water_setWaveSpeed(const string & waterId, const fvec2 & value);
	void water_setHeight(const string & waterId, float value);
	void water_setSize(const string & waterId, float value);
	void water_setSpecular(const string & waterId, bool value);
	void water_setReflective(const string & waterId, bool value);
	void water_setRefractive(const string & waterId, bool value);
	void water_setWireframed(const string & waterId, bool value);
	void water_setWireframeColor(const string & waterId, const fvec3 & value);
	void water_setDudvMap(const string & waterId, const string & value);
	void water_setNormalMap(const string & waterId, const string & value);
	void water_setHeightMap(const string & waterId, const string & value);
	void water_setWaveHeight(const string & waterId, float value);
	void water_setSpecularShininess(const string & waterId, float value);
	void water_setSpecularIntensity(const string & waterId, float value);
	void water_setMaxDepth(const string & waterId, float value);
	void water_setLightness(const string & waterId, float value);
	void water_setEdged(const string & waterId, bool value);
	void water_setColor(const string & waterId, const fvec3 & value);
	void water_setTextureRepeat(const string & waterId, int value);
	void water_setMinClipPosition(const string & waterId, const fvec3 & value);
	void water_setMaxClipPosition(const string & waterId, const fvec3 & value);
	void water_setDistortionSize(const string & waterId, float value);
	void water_setDistortionFactor(const string & waterId, float value);
	void water_setCaptureOffset(const string & waterId, float value);
	void water_setCapturingSky(const string & waterId, bool value);
	void water_setCapturingTerrain(const string & waterId, bool value);
	void water_setCapturingModels(const string & waterId, bool value);
	void water_setCapturingQuad3ds(const string & waterId, bool value);
	void water_setCapturingText3ds(const string & waterId, bool value);
	void water_setCapturingAabbs(const string & waterId, bool value);

	const vector<string> water_getIds() const;
	const string & water_getDudvMapPath(const string & waterId) const;
	const string & water_getNormalMapPath(const string & waterId) const;
	const string & water_getHeightMapPath(const string & waterId) const;
	const string water_getSelectedId() const;
	const fvec3 & water_getWireframeColor(const string & waterId) const;
	const fvec3 & water_getColor(const string & waterId) const;
	const fvec3 & water_getMinClipPosition(const string & waterId) const;
	const fvec3 & water_getMaxClipPosition(const string & waterId) const;
	const fvec2 & water_getRippleSpeed(const string & waterId) const;
	const fvec2 & water_getWaveSpeed(const string & waterId) const;
	const float water_getHeight(const string & waterId) const;
	const float water_getMaxDepth(const string & waterId) const;
	const float water_getSize(const string & waterId) const;
	const float water_getWaveHeight(const string & waterId) const;
	const float water_getSpecularShininess(const string & waterId) const;
	const float water_getSpecularIntensity(const string & waterId) const;
	const float water_getLightness(const string & waterId) const;
	const float water_getDistortionSize(const string & waterId) const;
	const float water_getDistortionFactor(const string & waterId) const;
	const float water_getCaptureOffset(const string & waterId) const;
	const int water_getTextureRepeat(const string & waterId) const;
	const bool water_isEdged(const string & waterId) const;
	const bool water_isExisting(const string & waterId) const;
	const bool water_isSpecular(const string & waterId) const;
	const bool water_isReflective(const string & waterId) const;
	const bool water_isRefractive(const string & waterId) const;
	const bool water_isWireframed(const string & waterId) const;
	const bool water_hasDudvMap(const string & waterId) const;
	const bool water_hasNormalMap(const string & waterId) const;
	const bool water_hasHeightMap(const string & waterId) const;
	const bool water_isCapturingSky(const string & waterId) const;
	const bool water_isCapturingTerrain(const string & waterId) const;
	const bool water_isCapturingModels(const string & waterId) const;
	const bool water_isCapturingQuad3ds(const string & waterId) const;
	const bool water_isCapturingText3ds(const string & waterId) const;
	const bool water_isCapturingAabbs(const string & waterId) const;

	void model_create(const string & modelId, const string & meshPath);
	void model_delete(const string & modelId);
	void model_setVisible(const string & modelId, bool value);
	void model_setDiffuseMap(const string & modelId, const string & partId, const string & value);
	void model_setEmissionMap(const string & modelId, const string & partId, const string & value);
	void model_setSpecularMap(const string & modelId, const string & partId, const string & value);
	void model_setReflectionMap(const string & modelId, const string & partId, const string & value);
	void model_setRefractionMap(const string & modelId, const string & partId, const string & value);
	void model_setNormalMap(const string & modelId, const string & partId, const string & value);
	void model_setLevelOfDetailId(const string & modelId, const string & value);
	void model_setFaceCulled(const string & modelId, const string & partId, bool value);
	void model_setReflectionType(const string & modelId, const string & partId, ReflectionType value);
	void model_setRefractionType(const string & modelId, const string & partId, RefractionType value);
	void model_setSpecular(const string & modelId, const string & partId, bool value);
	void model_setReflective(const string & modelId, const string & partId, bool value);
	void model_setRefractive(const string & modelId, const string & partId, bool value);
	void model_setShadowed(const string & modelId, bool value);
	void model_setReflected(const string & modelId, bool value);
	void model_setRefracted(const string & modelId, bool value);
	void model_setWireframed(const string & modelId, const string & partId, bool value);
	void model_setBasePosition(const string & modelId, const fvec3 & value);
	void model_setBaseRotation(const string & modelId, const fvec3 & value);
	void model_setBaseRotationOrigin(const string & modelId, const fvec3 & value);
	void model_setBaseSize(const string & modelId, const fvec3 & size);
	void model_setPartPosition(const string & modelId, const string & partId, const fvec3 & value);
	void model_setPartRotation(const string & modelId, const string & partId, const fvec3 & value);
	void model_setPartRotationOrigin(const string & modelId, const string & partId, const fvec3 & value);
	void model_setPartSize(const string & modelId, const string & partId, const fvec3 & value);
	void model_moveBase(const string & modelId, const fvec3 & change);
	void model_rotateBase(const string & modelId, const fvec3 & change);
	void model_scaleBase(const string & modelId, const fvec3 & change);
	void model_movePart(const string & modelId, const string & partId, const fvec3 & change);
	void model_rotatePart(const string & modelId, const string & partId, const fvec3 & change);
	void model_scalePart(const string & modelId, const string & partId, const fvec3 & change);
	void model_moveBaseTo(const string & modelId, const fvec3 & target, float speed);
	void model_rotateBaseTo(const string & modelId, const fvec3 & target, float speed);
	void model_scaleBaseTo(const string & modelId, const fvec3 & target, float speed);
	void model_movePartTo(const string & modelId, const string & partId, const fvec3 & target, float speed);
	void model_rotatePartTo(const string & modelId, const string & partId, const fvec3 & target, float speed);
	void model_scalePartTo(const string & modelId, const string & partId, const fvec3 & target, float speed);
	void model_setSpecularShininess(const string & modelId, const string & partId, float value);
	void model_setSpecularIntensity(const string & modelId, const string & partId, float value);
	void model_setReflectivity(const string & modelId, const string & partId, float value);
	void model_setRefractivity(const string & modelId, const string & partId, float value);
	void model_setLightness(const string & modelId, const string & partId, float value);
	void model_setEmissionIntensity(const string & modelId, const string & partId, float value);
	void model_setOpacity(const string & modelId, const string & partId, float value);
	void model_setMinAlpha(const string & modelId, const string & partId, float value);
	void model_setColor(const string & modelId, const string & partId, const fvec3 & value);
	void model_setWireframeColor(const string & modelId, const string & partId, const fvec3 & value);
	void model_setMinClipPosition(const string & modelId, const fvec3 & value);
	void model_setMaxClipPosition(const string & modelId, const fvec3 & value);
	void model_setLevelOfDetailDistance(const string & modelId, float value);
	void model_setTextureRepeat(const string & modelId, const string & partId, int value);
	void model_setBright(const string & modelId, const string & partId, bool value);
	void model_setRotationOrder(const string & modelId, DirectionOrderType value);
	void model_startAnimation3d(const string & modelId, const string & animation3dId, int playCount);
	void model_pauseAnimation3d(const string & modelId, const string & animation3dId);
	void model_autopauseAnimation3d(const string & modelId, const string & animation3dId);
	void model_resumeAnimation3d(const string & modelId, const string & animation3dId);
	void model_stopAnimation3d(const string & modelId, const string & animation3dId);
	void model_setAnimation3dSpeedMultiplier(const string & modelId, const string & animation3dId, float value);
	void model_setAnimation3dFrameIndex(const string & modelId, const string & animation3dId, int value);
	void model_setAnimation3dTotalMovement(const string & modelId, const string & partId, const string & animation3dId, const fvec3 & value);
	void model_setAnimation3dTotalRotation(const string & modelId, const string & partId, const string & animation3dId, const fvec3 & value);
	void model_setAnimation3dTotalScaling(const string & modelId, const string & partId, const string & animation3dId, const fvec3 & value);
	void model_setAnimation3dTotalSpeed(const string & modelId, const string & partId, const string & animation3dId, const fvec3 & value);

	const vector<string> model_getIds() const;
	const vector<string> model_getPartIds(const string & modelId) const;
	const vector<string> model_getAnimation3dIds(const string & modelId) const;
	const vector<string> model_getChildAabbIds(const string & modelId);
	const string & model_getMeshPath(const string & modelId) const;
	const string & model_getDiffuseMapPath(const string & modelId, const string & partId) const;
	const string & model_getEmissionMapPath(const string & modelId, const string & partId) const;
	const string & model_getSpecularMapPath(const string & modelId, const string & partId) const;
	const string & model_getReflectionMapPath(const string & modelId, const string & partId) const;
	const string & model_getRefractionMapPath(const string & modelId, const string & partId) const;
	const string & model_getNormalMapPath(const string & modelId, const string & partId) const;
	const string & model_getLevelOfDetailId(const string & modelId) const;
	const fvec3 & model_getBasePosition(const string & modelId) const;
	const fvec3 & model_getBaseRotation(const string & modelId) const;
	const fvec3 & model_getBaseRotationOrigin(const string & modelId) const;
	const fvec3 & model_getBaseSize(const string & modelId) const;
	const fvec3 & model_getPartPosition(const string & modelId, const string & partId) const;
	const fvec3 & model_getPartRotation(const string & modelId, const string & partId) const;
	const fvec3 & model_getPartRotationOrigin(const string & modelId, const string & partId) const;
	const fvec3 & model_getPartSize(const string & modelId, const string & partId) const;
	const fvec3 & model_getColor(const string & modelId, const string & partId) const;
	const fvec3 & model_getWireframeColor(const string & modelId, const string & partId) const;
	const fvec3 & model_getMinClipPosition(const string & modelId) const;
	const fvec3 & model_getMaxClipPosition(const string & modelId) const;
	const fvec3 & model_getAnimation3dTotalMovement(const string & modelId, const string & partId, const string & animation3dId) const;
	const fvec3 & model_getAnimation3dTotalRotation(const string & modelId, const string & partId, const string & animation3dId) const;
	const fvec3 & model_getAnimation3dTotalScaling(const string & modelId, const string & partId, const string & animation3dId) const;
	const fvec3 & model_getAnimation3dTotalSpeed(const string & modelId, const string & partId, const string & animation3dId) const;
	const float model_getReflectivity(const string & modelId, const string & partId) const;
	const float model_getRefractivity(const string & modelId, const string & partId) const;
	const float model_getLightness(const string & modelId, const string & partId) const;
	const float model_getSpecularShininess(const string & modelId, const string & partId) const;
	const float model_getSpecularIntensity(const string & modelId, const string & partId) const;
	const float model_getOpacity(const string & modelId, const string & partId) const;
	const float model_getLevelOfDetailDistance(const string & modelId) const;
	const float model_getEmissionIntensity(const string & modelId, const string & partId) const;
	const float model_getMinAlpha(const string & modelId, const string & partId) const;
	const float model_getAnimation3dSpeedMultiplier(const string & modelId, const string & animation3dId) const;
	const int model_getAnimation3dPlayCount(const string & modelId, const string & animation3dId) const;
	const int model_getAnimation3dFrameIndex(const string & modelId, const string & animation3dId) const;
	const int model_getTextureRepeat(const string & modelId, const string & partId) const;
	const bool model_isExisting(const string & modelId) const;
	const bool model_isVisible(const string & modelId) const;
	const bool model_isMultiParted(const string & modelId) const;
	const bool model_isFaceCulled(const string & modelId, const string & partId) const;
	const bool model_isSpecular(const string & modelId, const string & partId) const;
	const bool model_isShadowed(const string & modelId) const;
	const bool model_isReflected(const string & modelId) const;
	const bool model_isRefracted(const string & modelId) const;
	const bool model_isWireframed(const string & modelId, const string & partId) const;
	const bool model_hasPart(const string & modelId, const string & partId) const;
	const bool model_isBright(const string & modelId, const string & partId) const;
	const bool model_isReflective(const string & modelId, const string & partId) const;
	const bool model_isRefractive(const string & modelId, const string & partId) const;
	const bool model_hasDiffuseMap(const string & modelId, const string & partId) const;
	const bool model_hasEmissionMap(const string & modelId, const string & partId) const;
	const bool model_hasSpecularMap(const string & modelId, const string & partId) const;
	const bool model_hasReflectionMap(const string & modelId, const string & partId) const;
	const bool model_hasRefractionMap(const string & modelId, const string & partId) const;
	const bool model_hasNormalMap(const string & modelId, const string & partId) const;
	const bool model_isAnimation3dStarted(const string & modelId, const string & animation3dId) const;
	const bool model_isAnimation3dPaused(const string & modelId, const string & animation3dId) const;
	const bool model_isAnimation3dAutopaused(const string & modelId, const string & animation3dId) const;
	const ReflectionType model_getReflectionType(const string & modelId, const string & partId) const;
	const RefractionType model_getRefractionType(const string & modelId, const string & partId) const;
	const DirectionOrderType model_getRotationOrder(const string & modelId) const;

	void quad3d_create(const string & quad3dId, bool isCentered);
	void quad3d_delete(const string & quad3dId);
	void quad3d_setDiffuseMap(const string & quad3dId, const string & value);
	void quad3d_setEmissionMap(const string & quad3dId, const string & value);
	void quad3d_setPosition(const string & quad3dId, const fvec3 & value);
	void quad3d_setRotation(const string & quad3dId, const fvec3 & value);
	void quad3d_setSize(const string & quad3dId, const fvec2 & size);
	void quad3d_move(const string & quad3dId, const fvec3 & change);
	void quad3d_rotate(const string & quad3dId, const fvec3 & change);
	void quad3d_scale(const string & quad3dId, const fvec2 & change);
	void quad3d_moveTo(const string & quad3dId, const fvec3 & target, float speed);
	void quad3d_rotateTo(const string & quad3dId, const fvec3 & target, float speed);
	void quad3d_scaleTo(const string & quad3dId, const fvec2 & target, float speed);
	void quad3d_setColor(const string & quad3dId, const fvec3 & value);
	void quad3d_setWireframeColor(const string & quad3dId, const fvec3 & value);
	void quad3d_setUvMultiplier(const string & quad3dId, const fvec2 & value);
	void quad3d_setUvOffset(const string & quad3dId, const fvec2 & value);
	void quad3d_setMinClipPosition(const string & quad3dId, const fvec3 & value);
	void quad3d_setMaxClipPosition(const string & quad3dId, const fvec3 & value);
	void quad3d_setLightness(const string & quad3dId, float value);
	void quad3d_setOpacity(const string & quad3dId, float value);
	void quad3d_setTextureRepeat(const string & quad3dId, int value);
	void quad3d_setEmissionIntensity(const string & quad3dId, float value);
	void quad3d_setMinAlpha(const string & quad3dId, float value);
	void quad3d_setVisible(const string & quad3dId, bool value);
	void quad3d_setFacingCameraHorizontally(const string & quad3dId, bool value);
	void quad3d_setFacingCameraVertically(const string & quad3dId, bool value);
	void quad3d_setShadowed(const string & quad3dId, bool value);
	void quad3d_setReflected(const string & quad3dId, bool value);
	void quad3d_setRefracted(const string & quad3dId, bool value);
	void quad3d_setBright(const string & quad3dId, bool value);
	void quad3d_setWireframed(const string & quad3dId, bool value);
	void quad3d_setHorizontallyFlipped(const string & quad3dId, bool value);
	void quad3d_setVerticallyFlipped(const string & quad3dId, bool value);
	void quad3d_setRotationOrder(const string & quad3dId, DirectionOrderType value);
	void quad3d_startAnimation2d(const string & quad3dId, const string & animation2dId, int playCount);
	void quad3d_pauseAnimation2d(const string & quad3dId, const string & animation2dId);
	void quad3d_autopauseAnimation2d(const string & quad3dId, const string & animation2dId);
	void quad3d_resumeAnimation2d(const string & quad3dId, const string & animation2dId);
	void quad3d_stopAnimation2d(const string & quad3dId, const string & animation2dId);
	void quad3d_setAnimation2dRowIndex(const string & quad3dId, const string & animation2dId, int value);
	void quad3d_setAnimation2dColumnIndex(const string & quad3dId, const string & animation2dId, int value);
	void quad3d_setAnimation2dIntervalMultiplier(const string & quad3dId, const string & animation2dId, int value);
	void quad3d_setAnimation2dIntervalDivider(const string & quad3dId, const string & animation2dId, int value);
	void quad3d_setAnimation2dUpdateCount(const string & quad3dId, const string & animation2dId, int value);

	const vector<string> quad3d_getIds() const;
	const vector<string> quad3d_getChildAabbIds(const string & quad3dId) const;
	const string quad3d_getAnimation2dId(const string & quad3dId) const;
	const string & quad3d_getDiffuseMapPath(const string & quad3dId) const;
	const string & quad3d_getEmissionMapPath(const string & quad3dId) const;
	const fvec3 & quad3d_getPosition(const string & quad3dId) const;
	const fvec3 & quad3d_getRotation(const string & quad3dId) const;
	const fvec3 & quad3d_getColor(const string & quad3dId) const;
	const fvec3 & quad3d_getWireframeColor(const string & quad3dId) const;
	const fvec3 & quad3d_getMinClipPosition(const string & quad3dId) const;
	const fvec3 & quad3d_getMaxClipPosition(const string & quad3dId) const;
	const fvec2 & quad3d_getSize(const string & quad3dId) const;
	const fvec2 & quad3d_getUvMultiplier(const string & quad3dId) const;
	const fvec2 & quad3d_getUvOffset(const string & quad3dId) const;
	const float quad3d_getLightness(const string & quad3dId) const;
	const float quad3d_getOpacity(const string & quad3dId) const;
	const float quad3d_getEmissionIntensity(const string & quad3dId) const;
	const float quad3d_getMinAlpha(const string & quad3dId) const;
	const int quad3d_getAnimation2dPlayCount(const string & quad3dId, const string & animation2dId) const;
	const int quad3d_getAnimation2dRowIndex(const string & quad3dId, const string & animation2dId) const;
	const int quad3d_getAnimation2dColumnIndex(const string & quad3dId, const string & animation2dId) const;
	const int quad3d_getAnimation2dIntervalMultiplier(const string & quad3dId, const string & animation2dId) const;
	const int quad3d_getAnimation2dIntervalDivider(const string & quad3dId, const string & animation2dId) const;
	const int quad3d_getAnimation2dUpdateCount(const string & quad3dId, const string & animation2dId) const;
	const int quad3d_getTextureRepeat(const string & quad3dId) const;
	const bool quad3d_isExisting(const string & quad3dId) const;
	const bool quad3d_isVisible(const string & quad3dId) const;
	const bool quad3d_isFacingCameraHorizontally(const string & quad3dId) const;
	const bool quad3d_isFacingCameraVertically(const string & quad3dId) const;
	const bool quad3d_isShadowed(const string & quad3dId) const;
	const bool quad3d_isReflected(const string & quad3dId) const;
	const bool quad3d_isRefracted(const string & quad3dId) const;
	const bool quad3d_isBright(const string & quad3dId) const;
	const bool quad3d_isWireframed(const string & quad3dId) const;
	const bool quad3d_hasDiffuseMap(const string & quad3dId) const;
	const bool quad3d_hasEmissionMap(const string & quad3dId) const;
	const bool quad3d_isAnimation2dStarted(const string & quad3dId, const string & animation2dId) const;
	const bool quad3d_isAnimation2dPaused(const string & quad3dId, const string & animation2dId) const;
	const bool quad3d_isAnimation2dAutopaused(const string & quad3dId, const string & animation2dId) const;
	const bool quad3d_isHorizontallyFlipped(const string & quad3dId) const;
	const bool quad3d_isVerticallyFlipped(const string & quad3dId) const;
	const DirectionOrderType quad3d_getRotationOrder(const string & quad3dId) const;

	void quad2d_create(const string & quad2dId, bool isCentered);
	void quad2d_delete(const string & quad2dId);
	void quad2d_setVisible(const string & quad2dId, bool value);
	void quad2d_setDiffuseMap(const string & quad2dId, const string & value);
	void quad2d_setColor(const string & quad2dId, const fvec3 & value);
	void quad2d_setOpacity(const string & quad2dId, float value);
	void quad2d_setMinClipPosition(const string & quad2dId, const fvec2 & value);
	void quad2d_setMaxClipPosition(const string & quad2dId, const fvec2 & value);
	void quad2d_setPosition(const string & quad2dId, const fvec2 & value);
	void quad2d_setRotation(const string & quad2dId, float value);
	void quad2d_setSize(const string & quad2dId, const fvec2 & value);
	void quad2d_move(const string & quad2dId, const fvec2 & change);
	void quad2d_rotate(const string & quad2dId, float change);
	void quad2d_scale(const string & quad2dId, const fvec2 & change);
	void quad2d_moveTo(const string & quad2dId, const fvec2 & target, float speed);
	void quad2d_rotateTo(const string & quad2dId, float target, float speed);
	void quad2d_scaleTo(const string & quad2dId, const fvec2 & target, float speed);
	void quad2d_setHorizontallyFlipped(const string & quad2dId, bool value);
	void quad2d_setVerticallyFlipped(const string & quad2dId, bool value);
	void quad2d_setLightness(const string & quad2dId, float value);
	void quad2d_setWireframed(const string & quad2dId, bool value);
	void quad2d_setWireframeColor(const string & quad2dId, const fvec3 & value);
	void quad2d_setUvMultiplier(const string & quad2dId, const fvec2 & value);
	void quad2d_setUvOffset(const string & quad2dId, const fvec2 & value);
	void quad2d_setTextureRepeat(const string & quad2dId, int value);
	void quad2d_startAnimation2d(const string & quad2dId, const string & animation2dId, int playCount);
	void quad2d_pauseAnimation2d(const string & quad2dId, const string & animation2dId);
	void quad2d_autopauseAnimation2d(const string & quad2dId, const string & animation2dId);
	void quad2d_resumeAnimation2d(const string & quad2dId, const string & animation2dId);
	void quad2d_stopAnimation2d(const string & quad2dId, const string & animation2dId);
	void quad2d_setAnimation2dRowIndex(const string & animation2dId, const string & quad2dId, int value);
	void quad2d_setAnimation2dColumnIndex(const string & animation2dId, const string & quad2dId, int value);
	void quad2d_setAnimation2dIntervalMultiplier(const string & animation2dId, const string & quad2dId, int value);
	void quad2d_setAnimation2dIntervalDivider(const string & animation2dId, const string & quad2dId, int value);
	void quad2d_setAnimation2dUpdateCount(const string & animation2dId, const string & quad2dId, int value);

	const vector<string> quad2d_getIds() const;
	const vector<string> quad2d_getAnimation2dIds(const string & quad2dId) const;
	const string & quad2d_getDiffuseMapPath(const string & quad2dId) const;
	const fvec3 & quad2d_getWireframeColor(const string & quad2dId) const;
	const fvec3 & quad2d_getColor(const string & quad2dId) const;
	const fvec2 & quad2d_getPosition(const string & quad2dId) const;
	const fvec2 & quad2d_getSize(const string & quad2dId) const;
	const fvec2 & quad2d_getMinClipPosition(const string & quad2dId) const;
	const fvec2 & quad2d_getMaxClipPosition(const string & quad2dId) const;
	const fvec2 & quad2d_getUvMultiplier(const string & quad2dId) const;
	const fvec2 & quad2d_getUvOffset(const string & quad2dId) const;
	const float quad2d_getRotation(const string & quad2dId) const;
	const float quad2d_getOpacity(const string & quad2dId) const;
	const float quad2d_getLightness(const string & quad2dId) const;
	const int quad2d_getAnimation2dPlayCount(const string & quad2dId, const string & animation2dId) const;
	const int quad2d_getAnimation2dRowIndex(const string & quad2dId, const string & animation2dId) const;
	const int quad2d_getAnimation2dColumnIndex(const string & quad2dId, const string & animation2dId) const;
	const int quad2d_getAnimation2dIntervalMultiplier(const string & quad2dId, const string & animation2dId) const;
	const int quad2d_getAnimation2dIntervalDivider(const string & quad2dId, const string & animation2dId) const;
	const int quad2d_getAnimation2dUpdateCount(const string & quad2dId, const string & animation2dId) const;
	const int quad2d_getTextureRepeat(const string & quad2dId) const;
	const bool quad2d_isExisting(const string & quad2dId) const;
	const bool quad2d_isVisible(const string & quad2dId) const;
	const bool quad2d_isCentered(const string & quad2dId) const;
	const bool quad2d_isHorizontallyFlipped(const string & quad2dId) const;
	const bool quad2d_isVerticallyFlipped(const string & quad2dId) const;
	const bool quad2d_hasDiffuseMap(const string & quad2dId) const;
	const bool quad2d_isWireframed(const string & quad2dId) const;
	const bool quad2d_isAnimation2dStarted(const string & quad2dId, const string & animation2dId) const;
	const bool quad2d_isAnimation2dPaused(const string & quad2dId, const string & animation2dId) const;
	const bool quad2d_isAnimation2dAutopaused(const string & quad2dId, const string & animation2dId) const;

	void text3d_create(const string & text3dId, const string & fontMapPath, bool isCentered);
	void text3d_delete(const string & text3dId);
	void text3d_setContent(const string & text3dId, const string & value);
	void text3d_setPosition(const string & text3dId, const fvec3 & value);
	void text3d_setRotation(const string & text3dId, const fvec3 & value);
	void text3d_setSize(const string & text3dId, const fvec2 & size);
	void text3d_move(const string & text3dId, const fvec3 & change);
	void text3d_rotate(const string & text3dId, const fvec3 & change);
	void text3d_scale(const string & text3dId, const fvec2 & change);
	void text3d_moveTo(const string & text3dId, const fvec3 & target, float speed);
	void text3d_rotateTo(const string & text3dId, const fvec3 & target, float speed);
	void text3d_scaleTo(const string & text3dId, const fvec2 & target, float speed);
	void text3d_setColor(const string & text3dId, const fvec3 & value);
	void text3d_setWireframeColor(const string & text3dId, const fvec3 & value);
	void text3d_setMinClipPosition(const string & text3dId, const fvec3 & value);
	void text3d_setMaxClipPosition(const string & text3dId, const fvec3 & value);
	void text3d_setLightness(const string & text3dId, float value);
	void text3d_setOpacity(const string & text3dId, float value);
	void text3d_setMinAlpha(const string & text3dId, float value);
	void text3d_setVisible(const string & text3dId, bool value);
	void text3d_setFacingCameraHorizontally(const string & text3dId, bool value);
	void text3d_setFacingCameraVertically(const string & text3dId, bool value);
	void text3d_setShadowed(const string & text3dId, bool value);
	void text3d_setReflected(const string & text3dId, bool value);
	void text3d_setRefracted(const string & text3dId, bool value);
	void text3d_setBright(const string & text3dId, bool value);
	void text3d_setWireframed(const string & text3dId, bool value);
	void text3d_setHorizontallyFlipped(const string & text3dId, bool value);
	void text3d_setVerticallyFlipped(const string & text3dId, bool value);
	void text3d_setRotationOrder(const string & text3dId, DirectionOrderType value);

	const vector<string> text3d_getIds() const;
	const vector<string> text3d_getChildAabbIds(const string & text3dId) const;
	const string & text3d_getFontMapPath(const string & text3dId) const;
	const string & text3d_getContent(const string & text3dId) const;
	const fvec3 & text3d_getPosition(const string & text3dId) const;
	const fvec3 & text3d_getRotation(const string & text3dId) const;
	const fvec3 & text3d_getColor(const string & text3dId) const;
	const fvec3 & text3d_getWireframeColor(const string & text3dId) const;
	const fvec3 & text3d_getMinClipPosition(const string & text3dId) const;
	const fvec3 & text3d_getMaxClipPosition(const string & text3dId) const;
	const fvec2 & text3d_getSize(const string & text3dId) const;
	const float text3d_getLightness(const string & text3dId) const;
	const float text3d_getOpacity(const string & text3dId) const;
	const float text3d_getMinAlpha(const string & text3dId) const;
	const bool text3d_isExisting(const string & text3dId) const;
	const bool text3d_isVisible(const string & text3dId) const;
	const bool text3d_isFacingCameraHorizontally(const string & text3dId) const;
	const bool text3d_isFacingCameraVertically(const string & text3dId) const;
	const bool text3d_isShadowed(const string & text3dId) const;
	const bool text3d_isReflected(const string & text3dId) const;
	const bool text3d_isRefracted(const string & text3dId) const;
	const bool text3d_isBright(const string & text3dId) const;
	const bool text3d_isWireframed(const string & text3dId) const;
	const bool text3d_isHorizontallyFlipped(const string & text3dId) const;
	const bool text3d_isVerticallyFlipped(const string & text3dId) const;
	const DirectionOrderType text3d_getRotationOrder(const string & text3dId) const;

	void text2d_create(const string & text2dId, const string & fontMapPath, bool isCentered);
	void text2d_delete(const string & text2dId);
	void text2d_setVisible(const string & text2dId, bool value);
	void text2d_setContent(const string & text2dId, const string & value);
	void text2d_setColor(const string & text2dId, const fvec3 & value);
	void text2d_setOpacity(const string & text2dId, float value);
	void text2d_setMinClipPosition(const string & text2dId, const fvec2 & value);
	void text2d_setMaxClipPosition(const string & text2dId, const fvec2 & value);
	void text2d_setPosition(const string & text2dId, const fvec2 & value);
	void text2d_setRotation(const string & text2dId, float value);
	void text2d_setSize(const string & text2dId, const fvec2 & value);
	void text2d_move(const string & text2dId, const fvec2 & change);
	void text2d_rotate(const string & text2dId, float change);
	void text2d_scale(const string & text2dId, const fvec2 & change);
	void text2d_moveTo(const string & text2dId, const fvec2 & target, float speed);
	void text2d_rotateTo(const string & text2dId, float target, float speed);
	void text2d_scaleTo(const string & text2dId, const fvec2 & target, float speed);
	void text2d_setHorizontallyFlipped(const string & text2dId, bool value);
	void text2d_setVerticallyFlipped(const string & text2dId, bool value);
	void text2d_setWireframed(const string & text2dId, bool value);
	void text2d_setWireframeColor(const string & text2dId, const fvec3 & value);
	void text2d_setLightness(const string & text2dId, float value);

	const vector<string> text2d_getIds() const;
	const string & text2d_getFontMapPath(const string & text2dId) const;
	const string & text2d_getContent(const string & text2dId) const;
	const fvec3 & text2d_getColor(const string & text2dId) const;
	const fvec3 & text2d_getWireframeColor(const string & text2dId) const;
	const fvec2 & text2d_getPosition(const string & text2dId) const;
	const fvec2 & text2d_getSize(const string & text2dId) const;
	const fvec2 & text2d_getMinClipPosition(const string & text2dId) const;
	const fvec2 & text2d_getMaxClipPosition(const string & text2dId) const;
	const float text2d_getRotation(const string & text2dId) const;
	const float text2d_getOpacity(const string & text2dId) const;
	const float text2d_getLightness(const string & text2dId) const;
	const bool text2d_isExisting(const string & text2dId) const;
	const bool text2d_isVisible(const string & text2dId) const;
	const bool text2d_isCentered(const string & text2dId) const;
	const bool text2d_isHorizontallyFlipped(const string & text2dId) const;
	const bool text2d_isVerticallyFlipped(const string & text2dId) const;
	const bool text2d_isWireframed(const string & text2dId) const;

	void animation3d_create(const string & animation3dId);
	void animation3d_delete(const string & animation3dId);
	void animation3d_createPart(const string & animation3dId, const string & partId);
	void animation3d_deletePart(const string & animation3dId, const string & partId);
	void animation3d_deleteParts(const string & animation3dId);
	void animation3d_createFrame(const string & animation3dId, int index);
	void animation3d_deleteFrame(const string & animation3dId, int index);
	void animation3d_deleteFrames(const string & animation3dId);
	void animation3d_setTargetTransformation(const string & animation3dId, int frameIndex, const string & partId, const fvec3 & value);
	void animation3d_setRotationOrigin(const string & animation3dId, int frameIndex, const string & partId, const fvec3 & value);
	void animation3d_setSpeed(const string & animation3dId, int frameIndex, const string & partId, const fvec3 & value);
	void animation3d_setSpeedType(const string & animation3dId, int frameIndex, const string & partId, SpeedType value);
	void animation3d_setTransformationType(const string & animation3dId, int frameIndex, const string & partId, TransformationType value);

	const vector<string> animation3d_getIds() const;
	const vector<string> & animation3d_getPartIds(const string & animation3dId) const;
	const fvec3 & animation3d_getTargetTransformation(const string & animation3dId, int frameIndex, const string & partId) const;
	const fvec3 & animation3d_getRotationOrigin(const string & animation3dId, int frameIndex, const string & partId) const;
	const fvec3 & animation3d_getSpeed(const string & animation3dId, int frameIndex, const string & partId) const;
	const int animation3d_getFrameCount(const string & animation3dId);
	const bool animation3d_isExisting(const string & animation3dId) const;
	const bool animation3d_hasPart(const string & animation3dId, const string & partId) const;
	const SpeedType & animation3d_getSpeedType(const string & animation3dId, int frameIndex, const string & partId) const;
	const TransformationType & animation3d_getTransformationType(const string & animation3dId, int frameIndex, const string & partId) const;

	void animation2d_create(const string & animation2dId);
	void animation2d_delete(const string & animation2dId);
	void animation2d_setRowCount(const string & animation2dId, int value);
	void animation2d_setColumnCount(const string & animation2dId, int value);
	void animation2d_setInterval(const string & animation2dId, int value);

	const vector<string> animation2d_getIds() const;
	const int animation2d_getRowCount(const string & animation2dId) const;
	const int animation2d_getColumnCount(const string & animation2dId) const;
	const int animation2d_getInterval(const string & animation2dId) const;
	const bool animation2d_isExisting(const string & animation2dId) const;

	void aabb_create(const string & aabbId, bool isCentered);
	void aabb_delete(const string & aabbId);
	void aabb_bindToParent(const string & aabbId, const string & parentId, AabbParentType parentType);
	void aabb_unbindFromParent(const string & aabbId, const string & parentId, AabbParentType parentType);
	void aabb_setVisible(const string & aabbId, bool value);
	void aabb_setColor(const string & aabbId, const fvec3 & value);
	void aabb_setRaycastResponsive(const string & aabbId, bool value);
	void aabb_setCollisionResponsive(const string & aabbId, bool value);
	void aabb_setBasePosition(const string & aabbId, const fvec3 & value);
	void aabb_setBaseSize(const string & aabbId, const fvec3 & value);
	void aabb_setLocalPosition(const string & aabbId, const fvec3 & value);
	void aabb_setLocalSize(const string & aabbId, const fvec3 & value);
	void aabb_moveBase(const string & aabbId, const fvec3 & change);
	void aabb_scaleBase(const string & aabbId, const fvec3 & change);
	void aabb_moveBaseTo(const string & aabbId, const fvec3 & target, float speed);
	void aabb_scaleBaseTo(const string & aabbId, const fvec3 & target, float speed);
	void aabb_moveLocal(const string & aabbId, const fvec3 & change);
	void aabb_scaleLocal(const string & aabbId, const fvec3 & change);
	void aabb_moveLocalTo(const string & aabbId, const fvec3 & target, float speed);
	void aabb_scaleLocalTo(const string & aabbId, const fvec3 & target, float speed);
	void aabb_setMinClipPosition(const string & aabbId, const fvec3 & value);
	void aabb_setMaxClipPosition(const string & aabbId, const fvec3 & value);

	const vector<string> aabb_getIds() const;
	const string & aabb_getParentId(const string & aabbId) const;
	const fvec3 & aabb_getBasePosition(const string & aabbId) const;
	const fvec3 & aabb_getBaseSize(const string & aabbId) const;
	const fvec3 & aabb_getLocalPosition(const string & aabbId) const;
	const fvec3 & aabb_getLocalSize(const string & aabbId) const;
	const fvec3 & aabb_getColor(const string & aabbId) const;
	const fvec3 & aabb_getMinClipPosition(const string & aabbId) const;
	const fvec3 & aabb_getMaxClipPosition(const string & aabbId) const;
	const bool aabb_isRaycastResponsive(const string & aabbId) const;
	const bool aabb_isCollisionResponsive(const string & aabbId) const;
	const bool aabb_isExisting(const string & aabbId) const;
	const bool aabb_isVisible(const string & aabbId) const;
	const bool aabb_hasParent(const string & aabbId) const;
	const AabbParentType aabb_getParentType(const string & aabbId) const;

	void pointlight_create(const string & pointlightId);
	void pointlight_delete(const string & pointlightId);
	void pointlight_setVisible(const string & pointlightId, bool value);
	void pointlight_setPosition(const string & pointlightId, const fvec3 & value);
	void pointlight_move(const string & pointlightId, const fvec3 & change);
	void pointlight_moveTo(const string & pointlightId, const fvec3 & target, float speed);
	void pointlight_setRadius(const string & pointlightId, const fvec3 & value);
	void pointlight_setColor(const string & pointlightId, const fvec3 & value);
	void pointlight_setIntensity(const string & pointlightId, float value);
	void pointlight_setShape(const string & pointlightId, PointlightShapeType value);

	const vector<string> pointlight_getIds() const;
	const fvec3 & pointlight_getPosition(const string & pointlightId) const;
	const fvec3 & pointlight_getRadius(const string & pointlightId) const;
	const fvec3 & pointlight_getColor(const string & pointlightId) const;
	const float pointlight_getIntensity(const string & pointlightId) const;
	const int pointlight_getMaxCount() const;
	const bool pointlight_isExisting(const string & pointlightId) const;
	const bool pointlight_isVisible(const string & pointlightId) const;
	const PointlightShapeType pointlight_getShape(const string & pointlightId) const;

	void spotlight_create(const string & spotlightId);
	void spotlight_delete(const string & spotlightId);
	void spotlight_setVisible(const string & spotlightId, bool value);
	void spotlight_setPosition(const string & spotlightId, const fvec3 & value);
	void spotlight_move(const string & spotlightId, const fvec3 & change);
	void spotlight_moveTo(const string & spotlightId, const fvec3 & target, float speed);
	void spotlight_setColor(const string & spotlightId, const fvec3 & value);
	void spotlight_setYaw(const string & spotlightId, float value);
	void spotlight_setPitch(const string & spotlightId, float value);
	void spotlight_setIntensity(const string & spotlightId, float value);
	void spotlight_setAngle(const string & spotlightId, float value);
	void spotlight_setDistance(const string & spotlightId, float value);

	const vector<string> spotlight_getIds() const;
	const fvec3 & spotlight_getPosition(const string & spotlightId) const;
	const fvec3 & spotlight_getFront(const string & spotlightId) const;
	const fvec3 & spotlight_getColor(const string & spotlightId) const;
	const float spotlight_getYaw(const string & spotlightId) const;
	const float spotlight_getPitch(const string & spotlightId) const;
	const float spotlight_getIntensity(const string & spotlightId) const;
	const float spotlight_getAngle(const string & spotlightId) const;
	const float spotlight_getDistance(const string & spotlightId) const;
	const int spotlight_getMaxCount() const;
	const bool spotlight_isExisting(const string & spotlightId) const;
	const bool spotlight_isVisible(const string & spotlightId) const;

	void captor_create(const string & captorId);
	void captor_delete(const string & captorId);
	void captor_setPosition(const string & captorId, const fvec3 & value);
	void captor_move(const string & captorId, const fvec3 & change);
	void captor_moveTo(const string & captorId, const fvec3 & target, float speed);
	void captor_capture(const string & captorId);
	void captor_setExceptionId(const string & captorId, const string & value);
	void captor_setReflectionQuality(const string & captorId, int value);
	void captor_setRefractionQuality(const string & captorId, int value);

	const vector<string> captor_getIds() const;
	const string & captor_getExceptionId(const string & captorId) const;
	const fvec3 & captor_getPosition(const string & captorId) const;
	const int captor_getReflectionQuality(const string & captorId) const;
	const int captor_getRefractionQuality(const string & captorId) const;
	const bool captor_isExisting(const string & captorId) const;

	void sound3d_create(const string & sound3dId, const string & audioPath);
	void sound3d_delete(const string & sound3dId);
	void sound3d_setPosition(const string & sound3dId, const fvec3 & value);
	void sound3d_move(const string & sound3dId, const fvec3 & change);
	void sound3d_moveTo(const string & sound3dId, const fvec3 & target, float speed);
	void sound3d_setMaxVolume(const string & sound3dId, float value);
	void sound3d_setMaxDistance(const string & sound3dId, float value);
	void sound3d_start(const string & sound3dId, int playCount, float startTime);
	void sound3d_pause(const string & sound3dId, int index);
	void sound3d_resume(const string & sound3dId, int index);
	void sound3d_stop(const string & sound3dId, int index);

	const vector<string> sound3d_getIds() const;
	const string & sound3d_getAudioPath(const string & sound3dId) const;
	const fvec3 & sound3d_getPosition(const string & sound3dId) const;
	const float sound3d_getMaxDistance(const string & sound3dId) const;
	const float sound3d_getMaxVolume(const string & sound3dId) const;
	const float sound3d_getVolume(const string & sound3dId, int index) const;
	const float sound3d_getLeftIntensity(const string & sound3dId, int index) const;
	const float sound3d_getRightIntensity(const string & sound3dId, int index) const;
	const float sound3d_getCurrentTime(const string & sound3dId, int index) const;
	const int sound3d_getStartedCount(const string & sound3dId) const;
	const int sound3d_getPlayCount(const string & sound3dId, int index) const;
	const bool sound3d_isExisting(const string & sound3dId) const;
	const bool sound3d_isStarted(const string & sound3dId, int index) const;
	const bool sound3d_isPaused(const string & sound3dId, int index) const;
	const bool sound3d_isDeviceConnected() const;

	void sound2d_create(const string & sound2dId, const string & audioPath);
	void sound2d_delete(const string & sound2dId);
	void sound2d_start(const string & sound2dId, int playCount, float startTime);
	void sound2d_pause(const string & sound2dId, int index);
	void sound2d_resume(const string & sound2dId, int index);
	void sound2d_stop(const string & sound2dId, int index);
	void sound2d_setVolume(const string & sound2dId, int index, float value);
	void sound2d_setLeftIntensity(const string & sound2dId, int index, float value);
	void sound2d_setRightIntensity(const string & sound2dId, int index, float value);

	const vector<string> sound2d_getIds() const;
	const string & sound2d_getAudioPath(const string & sound2dId) const;
	const float sound2d_getVolume(const string & sound2dId, int index) const;
	const float sound2d_getLeftIntensity(const string & sound2dId, int index) const;
	const float sound2d_getRightIntensity(const string & sound2dId, int index) const;
	const float sound2d_getCurrentTime(const string & sound2dId, int index) const;
	const int sound2d_getStartedCount(const string & sound2dId) const;
	const int sound2d_getPlayCount(const string & sound2dId, int index) const;
	const bool sound2d_isExisting(const string & sound2dId) const;
	const bool sound2d_isStarted(const string & sound2dId, int index) const;
	const bool sound2d_isPaused(const string & sound2dId, int index) const;
	const bool sound2d_isDeviceConnected() const;

	void clock_create(const string & clockId);
	void clock_delete(const string & clockId);
	void clock_start(const string & clockId);
	void clock_pause(const string & clockId);
	void clock_resume(const string & clockId);
	void clock_stop(const string & clockId);

	const vector<string> clock_getIds() const;
	const float clock_getDeltaTime(const string & clockId) const;
	const bool clock_isExisting(const string & clockId) const;
	const bool clock_isStarted(const string & clockId) const;
	const bool clock_isPaused(const string & clockId) const;
	const bool clock_isIdReserved(const string & clockId) const;

	void graphics_setAmbientLightingEnabled(bool value);
	void graphics_setDirectionalLightingEnabled(bool value);
	void graphics_setFogEnabled(bool value);
	void graphics_setAntiAliasingEnabled(bool value);
	void graphics_setShadowsEnabled(bool value);
	void graphics_setBloomEnabled(bool value);
	void graphics_setSkyExposureEnabled(bool value);
	void graphics_setDofEnabled(bool value);
	void graphics_setMotionBlurEnabled(bool value);
	void graphics_setLensFlareEnabled(bool value);
	void graphics_setPlanarReflectionHeight(float value);
	void graphics_setPlanarReflectionQuality(int value);
	void graphics_setPlanarRefractionHeight(float value);
	void graphics_setPlanarRefractionQuality(int value);
	void graphics_setAnisotropicFilteringQuality(int value);
	void graphics_setAmbientLightingColor(const fvec3 & value);
	void graphics_setAmbientLightingIntensity(float value);
	void graphics_setDirectionalLightingPosition(const fvec3 & value);
	void graphics_setDirectionalLightingColor(const fvec3 & value);
	void graphics_setDirectionalLightingIntensity(float value);
	void graphics_setFogColor(const fvec3 & value);
	void graphics_setFogThickness(float value);
	void graphics_setFogMinDistance(float value);
	void graphics_setFogMaxDistance(float value);
	void graphics_setShadowCircleEnabled(bool value);
	void graphics_setShadowPositionOffset(const fvec3 & value);
	void graphics_setShadowLookatOffset(const fvec3 & value);
	void graphics_setShadowSize(float value);
	void graphics_setShadowLightness(float value);
	void graphics_setShadowBias(float value);
	void graphics_setShadowQuality(int value);
	void graphics_setShadowInterval(int value);
	void graphics_setShadowPcfCount(int value);
	void graphics_setShadowFollowingCameraX(bool value);
	void graphics_setShadowFollowingCameraY(bool value);
	void graphics_setShadowFollowingCameraZ(bool value);
	void graphics_setBloomIntensity(float value);
	void graphics_setBloomBlurCount(int value);
	void graphics_setBloomType(BloomType value);
	void graphics_setBloomQuality(int value);
	void graphics_setSkyExposureIntensity(float value);
	void graphics_setSkyExposureSpeed(float value);
	void graphics_setDofDynamicDistance(float value);
	void graphics_setDofBlurDistance(float value);
	void graphics_setDofDynamic(bool value);
	void graphics_setDofQuality(int value);
	void graphics_setMotionBlurIntensity(float value);
	void graphics_setMotionBlurQuality(int value);
	void graphics_setLensFlareMap(const string & value);
	void graphics_setLensFlareIntensity(float value);
	void graphics_setLensFlareSensitivity(float value);

	const string & graphics_getLensFlareMapPath() const;
	const fvec3 & graphics_getDirectionalLightingPosition() const;
	const fvec3 & graphics_getAmbientLightingColor() const;
	const fvec3 & graphics_getDirectionalLightingColor() const;
	const fvec3 & graphics_getFogColor() const;
	const fvec3 & graphics_getShadowPositionOffset() const;
	const fvec3 & graphics_getShadowLookatOffset() const;
	const float graphics_getAmbientLightingIntensity() const;
	const float graphics_getDirectionalLightingIntensity() const;
	const float graphics_getFogMinDistance() const;
	const float graphics_getFogMaxDistance() const;
	const float graphics_getFogThickness() const;
	const float graphics_getPlanarReflectionHeight() const;
	const float graphics_getPlanarRefractionHeight() const;
	const float graphics_getShadowSize() const;
	const float graphics_getShadowLightness() const;
	const float graphics_getShadowBias() const;
	const float graphics_getBloomIntensity() const;
	const float graphics_getSkyExposureIntensity() const;
	const float graphics_getSkyExposureSpeed() const;
	const float graphics_getDofDynamicDistance() const;
	const float graphics_getDofBlurDistance() const;
	const float graphics_getLensFlareIntensity() const;
	const float graphics_getLensFlareSensitivity() const;
	const float graphics_getMotionBlurIntensity() const;
	const int graphics_getBloomQuality() const;
	const int graphics_getDofQuality() const;
	const int graphics_getMotionBlurQuality() const;
	const int graphics_getAnisotropicFilteringQuality() const;
	const int graphics_getShadowQuality() const;
	const int graphics_getPlanarReflectionQuality() const;
	const int graphics_getPlanarRefractionQuality() const;
	const int graphics_getBloomBlurCount() const;
	const int graphics_getShadowInterval() const;
	const int graphics_getShadowPcfCount() const;
	const bool graphics_isAntiAliasingEnabled() const;
	const bool graphics_isAmbientLightingEnabled() const;
	const bool graphics_isDirectionalLightingEnabled() const;
	const bool graphics_isFogEnabled() const;
	const bool graphics_isBloomEnabled() const;
	const bool graphics_isSkyExposureEnabled() const;
	const bool graphics_isShadowsEnabled() const;
	const bool graphics_isDofEnabled() const;
	const bool graphics_isDofDynamic() const;
	const bool graphics_isMotionBlurEnabled() const;
	const bool graphics_isLensFlareEnabled() const;
	const bool graphics_isShadowCircleEnabled() const;
	const bool graphics_isShadowFollowingCameraX() const;
	const bool graphics_isShadowFollowingCameraY() const;
	const bool graphics_isShadowFollowingCameraZ() const;
	const bool graphics_hasLensFlareMap() const;
	const BloomType graphics_getBloomType() const;

	const bool input_isMouseScrolled(MouseWheelType wheel) const;
	const bool input_isMouseHeld(MouseButtonType button) const;
	const bool input_isMousePressed(MouseButtonType button) const;
	const bool input_isMouseToggled(MouseButtonType button) const;
	const bool input_isKeyboardHeld(KeyboardKeyType key) const;
	const bool input_isKeyboardPressed(KeyboardKeyType key) const;
	const bool input_isKeyboardToggled(KeyboardKeyType key) const;

	void camera_reset();
	void camera_setFirstPersonEnabled(bool value);
	void camera_setThirdPersonEnabled(bool value);
	void camera_followRightXZ(float speed);
	void camera_followFrontXZ(float speed);
	void camera_followFrontXYZ(float speed);
	void camera_move(const fvec3 & speed);
	void camera_moveTo(const fvec3 & target, float speed);
	void camera_setPosition(const fvec3 & value);
	void camera_setThirdPersonLookat(const fvec3 & value);
	void camera_setThirdPersonDistance(float value);
	void camera_setNear(float value);
	void camera_setFar(float value);
	void camera_setFov(float value);
	void camera_setYaw(float value);
	void camera_setPitch(float value);
	void camera_setFirstPersonYaw(float value);
	void camera_setFirstPersonPitch(float value);
	void camera_setThirdPersonYaw(float value);
	void camera_setThirdPersonPitch(float value);
	void camera_setMinFirstPersonPitch(float value);
	void camera_setMaxFirstPersonPitch(float value);
	void camera_setMinThirdPersonPitch(float value);
	void camera_setMaxThirdPersonPitch(float value);
	void camera_setCursorSensitivity(float value);
	void camera_setAccelerationResistence(float value);

	const fvec3 & camera_getPosition() const;
	const fvec3 & camera_getRight() const;
	const fvec3 & camera_getUp() const;
	const fvec3 & camera_getFront() const;
	const fvec3 & camera_getThirdPersonLookat() const;
	const float camera_getNear() const;
	const float camera_getFar() const;
	const float camera_getFov() const;
	const float camera_getCursorSensitivity() const;
	const float camera_getYaw() const;
	const float camera_getPitch() const;
	const float camera_getFirstPersonYaw() const;
	const float camera_getFirstPersonPitch() const;
	const float camera_getThirdPersonYaw() const;
	const float camera_getThirdPersonPitch() const;
	const float camera_getMinFirstPersonPitch() const;
	const float camera_getMaxFirstPersonPitch() const;
	const float camera_getMinThirdPersonPitch() const;
	const float camera_getMaxThirdPersonPitch() const;
	const float camera_getThirdPersonDistance() const;
	const float camera_getAccelerationResistence() const;
	const bool camera_isThirdPersonEnabled() const;
	const bool camera_isFirstPersonEnabled() const;

	void raycast_calculateCursorRay();
	void raycast_calculateTerrainIntersection(float maxDistance, float precision);
	void raycast_calculateAabbsIntersection();
	void raycast_clearCursorRay();
	void raycast_clearTerrainIntersection();
	void raycast_clearAabbsIntersection();

	const string & raycast_getClosestAabbId() const;
	const fvec3 & raycast_getCursorRayPosition() const;
	const fvec3 & raycast_getCursorRayDirection() const;
	const fvec3 & raycast_getPointOnTerrain() const;
	const float raycast_getDistanceToTerrain();
	const float raycast_getDistanceToAabb(const string & aabbId);
	const bool raycast_isPointOnTerrainValid() const;

	void collision_setCameraBox(float left, float right, float bottom, float top, float back, float front);
	void collision_calculateCameraWithTerrain(bool mustRespondY, float responseSpeed);
	void collision_calculateCameraWithAabbs(bool mustRespondX, bool mustRespondY, bool mustRespondZ);
	void collision_calculateAabbWithAabbs(const string & aabbId);
	void collision_clearCameraWithTerrain();
	void collision_clearCameraWithAabbs();
	void collision_clearAabbWithAabbs();

	const vector<string> collision_checkCameraWithAabbs() const;
	const vector<string> collision_checkCameraWithAabbs(DirectionType direction) const;
	const vector<string> collision_checkAabbWithAabbs(const string & aabbId) const;
	const bool collision_checkCameraWithTerrain() const;
	const bool collision_checkCameraWithAabb(const string & aabbId) const;
	const bool collision_checkCameraWithAabb(const string & aabbId, DirectionType direction) const;
	const bool collision_checkAabbWithAabb(const string & firstAabbId, const string & secondAabbId) const;

	void server_start(int maxClientCount);
	void server_sendTcpMessageToClient(const string & username, const string & content);
	void server_sendUdpMessageToClient(const string & username, const string & content);
	void server_broadcastTcpMessageToClients(const string & content);
	void server_broadcastUdpMessageToClients(const string & content);
	void server_disconnectClient(const string & username);
	void server_disconnectClients();
	void server_stop();

	const vector<NetworkingClientMessage> server_getPendingMessages() const;
	const vector<string> server_getClientIps() const;
	const vector<string> server_getClientUsernames() const;
	const string server_getNewClientIp() const;
	const string server_getNewClientUsername() const;
	const string server_getOldClientIp() const;
	const string server_getOldClientUsername() const;
	const int server_getMaxMessageSize() const;
	const bool server_isRunning() const;
	const bool server_isClientConnected(const string & username) const;
	const bool server_isMessageReserved(const string & message);

	void client_start(const string & username);
	void client_connectToServer(const string & ip);
	void client_sendTcpMessageToServer(const string & content);
	void client_sendUdpMessageToServer(const string & content);
	void client_disconnectFromServer();
	void client_stop();

	const vector<NetworkingServerMessage> client_getPendingMessages() const;
	const string client_getUsername() const;
	const string client_getServerIp() const;
	const int client_getPingLatency() const;
	const int client_getMaxUsernameSize() const;
	const int client_getMaxMessageSize() const;
	const bool client_isValidIp(const string & ip) const;
	const bool client_isRunning() const;
	const bool client_isConnectingToServer() const;
	const bool client_isConnectedToServer() const;
	const bool client_isAcceptedByServer() const;
	const bool client_isMessageReserved(const string & message);

	void misc_setVsyncEnabled(bool value);
	void misc_setCursorId(const string & value);
	void misc_cacheMesh(const string & filePath, bool isCrucial);
	void misc_cacheImage(const string & filePath, bool isCrucial);
	void misc_cacheAudio(const string & filePath, bool isCrucial);
	void misc_cacheMeshes(const vector<string> & filePaths, bool isCrucial);
	void misc_cacheImages(const vector<string> & filePaths, bool isCrucial);
	void misc_cacheAudios(const vector<string> & filePaths, bool isCrucial);
	void misc_clearMeshCache(const string & filePath);
	void misc_clearImageCache(const string & filePath);
	void misc_clearAudioCache(const string & filePath);
	void misc_clearMeshesCache();
	void misc_clearImagesCache();
	void misc_clearAudiosCache();

	const vector<pair<string, float>> & misc_getUpdateDeltaTimes() const;
	const vector<pair<string, float>> & misc_getRenderDeltaTimes() const;
	const string misc_getCursorId() const;
	const string misc_getCpuName() const;
	const string misc_getGpuName() const;
	const string misc_getOpenglVersion() const;
	const float misc_getTotalDeltaTime() const;
	const int misc_getTriangleCount() const;
	const int misc_getUpdateCountPerSecond() const;
	const int misc_getPassedUpdateCount() const;
	const bool misc_isVsyncEnabled() const;

private:
	shared_ptr<EngineCore> _core = nullptr;
};