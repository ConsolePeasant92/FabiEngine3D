#pragma once

#include "input_type.hpp"
#include "direction.hpp"
#include "direction_order.hpp"
#include "aabb_parent_entity_type.hpp"
#include "networking_client_message.hpp"
#include "networking_server_message.hpp"
#include "mathematics.hpp"
#include "water_quality.hpp"
#include "bloom_type.hpp"
#include "reflection_type.hpp"
#include "pointlight_shape.hpp"
#include "ray.hpp"

#include <array>
#include <vector>
#include <set>
#include <map>
#include <unordered_map>
#include <string>
#include <memory>

using std::min;
using std::max;
using std::reverse;
using std::to_string;
using std::make_shared;
using std::make_pair;
using std::array;
using std::vector;
using std::set;
using std::map;
using std::unordered_map;
using std::pair;
using std::string;
using std::shared_ptr;

class EngineCore;

class EngineInterface final
{
	friend EngineCore;
public:
	void inject(shared_ptr<EngineCore> core);

	void application_start();
	void application_pause();
	void application_resume();
	void application_stop();

	const bool application_isPaused() const;

	void sky_create(const string& ID);
	void sky_delete(const string& ID);
	void sky_deleteAll();
	void sky_setVisible(const string& ID, bool value);
	void sky_select(const string& ID);
	void sky_setCubeMaps(const string& ID, const array<string, 6>& value);
	void sky_setRightCubeMap(const string& ID, const string& value);
	void sky_setLeftCubeMap(const string& ID, const string& value);
	void sky_setTopCubeMap(const string& ID, const string& value);
	void sky_setBottomCubeMap(const string& ID, const string& value);
	void sky_setBackCubeMap(const string& ID, const string& value);
	void sky_setFrontCubeMap(const string& ID, const string& value);
	void sky_setLightness(const string& ID, float value);
	void sky_setRotation(const string& ID, float value);
	void sky_setColor(const string& ID, const fvec3& value);
	void sky_setWireframed(const string& ID, bool value);
	void sky_setWireframeColor(const string& ID, const fvec3& value);

	const vector<string> sky_getIDs() const;
	const array<string, 6>& sky_getCubeMapPaths(const string& ID) const;
	const string& sky_getRightCubeMapPath(const string& ID) const;
	const string& sky_getLeftCubeMapPath(const string& ID) const;
	const string& sky_getTopCubeMapPath(const string& ID) const;
	const string& sky_getBottomCubeMapPath(const string& ID) const;
	const string& sky_getBackCubeMapPath(const string& ID) const;
	const string& sky_getFrontCubeMapPath(const string& ID) const;
	const string sky_getSelectedID() const;
	const fvec3& sky_getWireframeColor(const string& ID) const;
	const fvec3& sky_getColor(const string& ID) const;
	const float sky_getLightness(const string& ID) const;
	const float sky_getRotation(const string& ID) const;
	const bool sky_isExisting(const string& ID) const;
	const bool sky_isVisible(const string& ID) const;
	const bool sky_isWireframed(const string& ID) const;
	const bool sky_hasRightCubeMap(const string& ID) const;
	const bool sky_hasLeftCubeMap(const string& ID) const;
	const bool sky_hasTopCubeMap(const string& ID) const;
	const bool sky_hasBottomCubeMap(const string& ID) const;
	const bool sky_hasBackCubeMap(const string& ID) const;
	const bool sky_hasFrontCubeMap(const string& ID) const;

	void terrain_create(const string& ID, const string& heightMapPath);
	void terrain_delete(const string& ID);
	void terrain_deleteAll();
	void terrain_setVisible(const string& ID, bool value);
	void terrain_select(const string& ID);
	void terrain_setBlendMap(const string& ID, const string& value);
	void terrain_setDiffuseMap(const string& ID, const string& value);
	void terrain_setRedDiffuseMap(const string& ID, const string& value);
	void terrain_setGreenDiffuseMap(const string& ID, const string& value);
	void terrain_setBlueDiffuseMap(const string& ID, const string& value);
	void terrain_setNormalMap(const string& ID, const string& value);
	void terrain_setRedNormalMap(const string& ID, const string& value);
	void terrain_setGreenNormalMap(const string& ID, const string& value);
	void terrain_setBlueNormalMap(const string& ID, const string& value);
	void terrain_setRedTextureRepeat(const string& ID, float value);
	void terrain_setGreenTextureRepeat(const string& ID, float value);
	void terrain_setBlueTextureRepeat(const string& ID, float value);
	void terrain_setMaxHeight(const string& ID, float value);
	void terrain_setTextureRepeat(const string& ID, float value);
	void terrain_setLightness(const string& ID, float value);
	void terrain_setSpecularShininess(const string& ID, float value);
	void terrain_setSpecularIntensity(const string& ID, float value);
	void terrain_setSpecular(const string& ID, bool value);
	void terrain_setWireframed(const string& ID, bool value);
	void terrain_setWireframeColor(const string& ID, const fvec3& value);

	const vector<string> terrain_getIDs() const;
	const string terrain_getSelectedID() const;
	const string& terrain_getHeightMapPath(const string& ID) const;
	const string& terrain_getBlendMapPath(const string& ID) const;
	const string& terrain_getDiffuseMapPath(const string& ID) const;
	const string& terrain_getRedDiffuseMapPath(const string& ID) const;
	const string& terrain_getGreenDiffuseMapPath(const string& ID) const;
	const string& terrain_getBlueDiffuseMapPath(const string& ID) const;
	const string& terrain_getNormalMapPath(const string& ID) const;
	const string& terrain_getRedNormalMapPath(const string& ID) const;
	const string& terrain_getGreenNormalMapPath(const string& ID) const;
	const string& terrain_getBlueNormalMapPath(const string& ID) const;
	const fvec3& terrain_getWireframeColor(const string& ID) const;
	const float terrain_getMaxHeight(const string& ID) const;
	const float terrain_getTextureRepeat(const string& ID) const;
	const float terrain_getLightness(const string& ID) const;
	const float terrain_getRedTextureRepeat(const string& ID) const;
	const float terrain_getGreenTextureRepeat(const string& ID) const;
	const float terrain_getBlueTextureRepeat(const string& ID) const;
	const float terrain_getSize(const string& ID) const;
	const float terrain_getPixelHeight(const string& ID, float x, float z) const;
	const float terrain_getSpecularShininess(const string& ID) const;
	const float terrain_getSpecularIntensity(const string& ID) const;
	const bool terrain_isExisting(const string& ID) const;
	const bool terrain_isVisible(const string& ID) const;
	const bool terrain_isSpecular(const string& ID) const;
	const bool terrain_isWireframed(const string& ID) const;
	const bool terrain_isInside(const string& ID, float x, float z) const;
	const bool terrain_hasBlendMap(const string& ID) const;
	const bool terrain_hasDiffuseMap(const string& ID) const;
	const bool terrain_hasRedDiffuseMap(const string& ID) const;
	const bool terrain_hasGreenDiffuseMap(const string& ID) const;
	const bool terrain_hasBlueDiffuseMap(const string& ID) const;
	const bool terrain_hasNormalMap(const string& ID) const;
	const bool terrain_hasRedNormalMap(const string& ID) const;
	const bool terrain_hasGreenNormalMap(const string& ID) const;
	const bool terrain_hasBlueNormalMap(const string& ID) const;

	void water_create(const string& ID);
	void water_delete(const string& ID);
	void water_deleteAll();
	void water_setVisible(const string& ID, bool value);
	void water_select(const string& ID);
	void water_setSpeed(const string& ID, const fvec2& value);
	void water_setHeight(const string& ID, float value);
	void water_setSize(const string& ID, float value);
	void water_setSpecular(const string& ID, bool value);
	void water_setReflective(const string& ID, bool value);
	void water_setRefractive(const string& ID, bool value);
	void water_setWireframed(const string& ID, bool value);
	void water_setWireframeColor(const string& ID, const fvec3& value);
	void water_setDudvMap(const string& ID, const string& value);
	void water_setNormalMap(const string& ID, const string& value);
	void water_setDisplacementMap(const string& ID, const string& value);
	void water_setWaveHeight(const string& ID, float value);
	void water_setSpecularShininess(const string& ID, float value);
	void water_setSpecularIntensity(const string& ID, float value);
	void water_setTransparency(const string& ID, float value);
	void water_setColor(const string& ID, const fvec3& value);
	void water_setTextureRepeat(const string& ID, float value);
	void water_setQuality(const string& ID, WaterQuality value);

	const vector<string> water_getIDs() const;
	const string& water_getDudvMapPath(const string& ID) const;
	const string& water_getNormalMapPath(const string& ID) const;
	const string& water_getDisplacementMapPath(const string& ID) const;
	const string water_getSelectedID() const;
	const fvec3& water_getWireframeColor(const string& ID) const;
	const fvec3& water_getColor(const string& ID) const;
	const fvec2& water_getSpeed(const string& ID) const;
	const float water_getHeight(const string& ID) const;
	const float water_getSize(const string& ID) const;
	const float water_getTextureRepeat(const string& ID) const;
	const float water_getWaveHeight(const string& ID) const;
	const float water_getSpecularShininess(const string& ID) const;
	const float water_getSpecularIntensity(const string& ID) const;
	const float water_getTransparency(const string& ID) const;
	const bool water_isExisting(const string& ID) const;
	const bool water_isVisible(const string& ID) const;
	const bool water_isSpecular(const string& ID) const;
	const bool water_isReflective(const string& ID) const;
	const bool water_isRefractive(const string& ID) const;
	const bool water_isWireframed(const string& ID) const;
	const bool water_hasDudvMap(const string& ID) const;
	const bool water_hasNormalMap(const string& ID) const;
	const bool water_hasDisplacementMap(const string& ID) const;
	const WaterQuality water_getQuality(const string& ID) const;

	void model_create(const string& ID, const string& meshPath);
	void model_delete(const string& ID);
	void model_deleteAll();
	void model_setVisible(const string& ID, bool value);
	void model_setDiffuseMap(const string& ID, const string& partID, const string& value);
	void model_setEmissionMap(const string& ID, const string& partID, const string& value);
	void model_setSpecularMap(const string& ID, const string& partID, const string& value);
	void model_setReflectionMap(const string& ID, const string& partID, const string& value);
	void model_setNormalMap(const string& ID, const string& partID, const string& value);
	void model_setLevelOfDetailEntityID(const string& ID, const string& value);
	void model_setFaceCulled(const string& ID, const string& partID, bool value);
	void model_setReflectionType(const string& ID, const string& partID, ReflectionType value);
	void model_setSpecular(const string& ID, const string& partID, bool value);
	void model_setReflective(const string& ID, const string& partID, bool value);
	void model_setShadowed(const string& ID, bool value);
	void model_setReflected(const string& ID, bool value);
	void model_setDepthMapIncluded(const string& ID, bool value);
	void model_setFrozen(const string& ID, bool value);
	void model_setWireframed(const string& ID, const string& partID, bool value);
	void model_setBasePosition(const string& ID, const fvec3& value);
	void model_setBaseRotation(const string& ID, const fvec3& value);
	void model_setBaseRotationOrigin(const string& ID, const fvec3& value);
	void model_setBaseSize(const string& ID, const fvec3& size);
	void model_setPartPosition(const string& ID, const string& partID, const fvec3& value);
	void model_setPartRotation(const string& ID, const string& partID, const fvec3& value);
	void model_setPartRotationOrigin(const string& ID, const string& partID, const fvec3& value);
	void model_setPartSize(const string& ID, const string& partID, const fvec3& value);
	void model_moveBase(const string& ID, const fvec3& change);
	void model_rotateBase(const string& ID, const fvec3& change);
	void model_scaleBase(const string& ID, const fvec3& change);
	void model_movePart(const string& ID, const string& partID, const fvec3& change);
	void model_rotatePart(const string& ID, const string& partID, const fvec3& change);
	void model_scalePart(const string& ID, const string& partID, const fvec3& change);
	void model_moveBaseTo(const string& ID, const fvec3& target, float speed);
	void model_rotateBaseTo(const string& ID, const fvec3& target, float speed);
	void model_scaleBaseTo(const string& ID, const fvec3& target, float speed);
	void model_movePartTo(const string& ID, const string& partID, const fvec3& target, float speed);
	void model_rotatePartTo(const string& ID, const string& partID, const fvec3& target, float speed);
	void model_scalePartTo(const string& ID, const string& partID, const fvec3& target, float speed);
	void model_setLevelOfDetailSize(const string& ID, const fvec3& value);
	void model_setSpecularShininess(const string& ID, const string& partID, float value);
	void model_setSpecularIntensity(const string& ID, const string& partID, float value);
	void model_setReflectivity(const string& ID, const string& partID, float value);
	void model_setLightness(const string& ID, const string& partID, float value);
	void model_setEmissionIntensity(const string& ID, const string& partID, float value);
	void model_setTransparency(const string& ID, const string& partID, float value);
	void model_setColor(const string& ID, const string& partID, const fvec3& value);
	void model_setWireframeColor(const string& ID, const string& partID, const fvec3& value);
	void model_setMinHeight(const string& ID, float value);
	void model_setMaxHeight(const string& ID, float value);
	void model_setLevelOfDetailDistance(const string& ID, float value);
	void model_setTextureRepeat(const string& ID, const string& partID, float value);
	void model_setBright(const string& ID, const string& partID, bool value);
	void model_setRotationOrder(const string& ID, DirectionOrder value);

	const vector<string> model_getPartIDs(const string& ID) const;
	const vector<string> model_getIDs() const;
	const vector<string> model_getGroupIDs(const string& ID) const;
	const string& model_getMeshPath(const string& ID) const;
	const string& model_getDiffuseMapPath(const string& ID, const string& partID) const;
	const string& model_getEmissionMapPath(const string& ID, const string& partID) const;
	const string& model_getSpecularMapPath(const string& ID, const string& partID) const;
	const string& model_getReflectionMapPath(const string& ID, const string& partID) const;
	const string& model_getNormalMapPath(const string& ID, const string& partID) const;
	const string& model_getLevelOfDetailEntityID(const string& ID) const;
	const fvec3& model_getLevelOfDetailSize(const string& ID) const;
	const fvec3& model_getBasePosition(const string& ID) const;
	const fvec3& model_getBaseRotation(const string& ID) const;
	const fvec3& model_getBaseRotationOrigin(const string& ID) const;
	const fvec3& model_getBaseSize(const string& ID) const;
	const fvec3& model_getPartPosition(const string& ID, const string& partID) const;
	const fvec3& model_getPartRotation(const string& ID, const string& partID) const;
	const fvec3& model_getPartRotationOrigin(const string& ID, const string& partID) const;
	const fvec3& model_getPartSize(const string& ID, const string& partID) const;
	const fvec3& model_getColor(const string& ID, const string& partID) const;
	const fvec3& model_getWireframeColor(const string& ID, const string& partID) const;
	const float model_getReflectivity(const string& ID, const string& partID) const;
	const float model_getLightness(const string& ID, const string& partID) const;
	const float model_getSpecularShininess(const string& ID, const string& partID) const;
	const float model_getSpecularIntensity(const string& ID, const string& partID) const;
	const float model_getTransparency(const string& ID, const string& partID) const;
	const float model_getMinHeight(const string& ID) const;
	const float model_getMaxHeight(const string& ID) const;
	const float model_getLevelOfDetailDistance(const string& ID) const;
	const float model_getTextureRepeat(const string& ID, const string& partID) const;
	const float model_getEmissionIntensity(const string& ID, const string& partID) const;
	const bool model_isExisting(const string& ID) const;
	const bool model_isVisible(const string& ID) const;
	const bool model_isMultiParted(const string& ID) const;
	const bool model_isFaceCulled(const string& ID, const string& partID) const;
	const bool model_isSpecular(const string& ID, const string& partID) const;
	const bool model_isShadowed(const string& ID) const;
	const bool model_isReflected(const string& ID) const;
	const bool model_isFrozen(const string& ID) const;
	const bool model_isWireframed(const string& ID, const string& partID) const;
	const bool model_isDepthMapIncluded(const string& ID) const;
	const bool model_hasPart(const string& ID, const string& partID) const;
	const bool model_isBright(const string& ID, const string& partID) const;
	const bool model_isReflective(const string& ID, const string& partID) const;
	const bool model_hasDiffuseMap(const string& ID, const string& partID) const;
	const bool model_hasEmissionMap(const string& ID, const string& partID) const;
	const bool model_hasSpecularMap(const string& ID, const string& partID) const;
	const bool model_hasReflectionMap(const string& ID, const string& partID) const;
	const bool model_hasNormalMap(const string& ID, const string& partID) const;
	const ReflectionType model_getReflectionType(const string& ID, const string& partID) const;
	const DirectionOrder model_getRotationOrder(const string& ID) const;

	void quad3d_create(const string& ID, bool isCentered);
	void quad3d_delete(const string& ID);
	void quad3d_deleteAll();
	void quad3d_setDiffuseMap(const string& ID, const string& value);
	void quad3d_setEmissionMap(const string& ID, const string& value);
	void quad3d_setPosition(const string& ID, const fvec3& value);
	void quad3d_setRotation(const string& ID, const fvec3& value);
	void quad3d_setSize(const string& ID, const fvec2& size);
	void quad3d_move(const string& ID, const fvec3& change);
	void quad3d_rotate(const string& ID, const fvec3& change);
	void quad3d_scale(const string& ID, const fvec2& change);
	void quad3d_moveTo(const string& ID, const fvec3& target, float speed);
	void quad3d_rotateTo(const string& ID, const fvec3& target, float speed);
	void quad3d_scaleTo(const string& ID, const fvec2& target, float speed);
	void quad3d_setColor(const string& ID, const fvec3& value);
	void quad3d_setWireframeColor(const string& ID, const fvec3& value);
	void quad3d_setUvMultiplier(const string& ID, const fvec2& value);
	void quad3d_setUvOffset(const string& ID, const fvec2& value);
	void quad3d_setMinHeight(const string& ID, float value);
	void quad3d_setMaxHeight(const string& ID, float value);
	void quad3d_setLightness(const string& ID, float value);
	void quad3d_setTransparency(const string& ID, float value);
	void quad3d_setTextureRepeat(const string& ID, float value);
	void quad3d_setEmissionIntensity(const string& ID, float value);
	void quad3d_setVisible(const string& ID, bool value);
	void quad3d_setFacingCameraX(const string& ID, bool value);
	void quad3d_setFacingCameraY(const string& ID, bool value);
	void quad3d_setDepthMapIncluded(const string& ID, bool value);
	void quad3d_setShadowed(const string& ID, bool value);
	void quad3d_setReflected(const string& ID, bool value);
	void quad3d_setBright(const string& ID, bool value);
	void quad3d_setWireframed(const string& ID, bool value);
	void quad3d_setFrozen(const string& ID, bool value);

	const vector<string> quad3d_getIDs() const;
	const string& quad3d_getDiffuseMapPath(const string& ID) const;
	const string& quad3d_getEmissionMapPath(const string& ID) const;
	const fvec3& quad3d_getPosition(const string& ID) const;
	const fvec3& quad3d_getRotation(const string& ID) const;
	const fvec3& quad3d_getColor(const string& ID) const;
	const fvec3& quad3d_getWireframeColor(const string& ID) const;
	const fvec2& quad3d_getSize(const string& ID) const;
	const fvec2& quad3d_getUvMultiplier(const string& ID) const;
	const fvec2& quad3d_getUvOffset(const string& ID) const;
	const float quad3d_getLightness(const string& ID) const;
	const float quad3d_getMinHeight(const string& ID) const;
	const float quad3d_getMaxHeight(const string& ID) const;
	const float quad3d_getTransparency(const string& ID) const;
	const float quad3d_getTextureRepeat(const string& ID) const;
	const float quad3d_getEmissionIntensity(const string& ID) const;
	const bool quad3d_isExisting(const string& ID) const;
	const bool quad3d_isVisible(const string& ID) const;
	const bool quad3d_isFacingCameraX(const string& ID) const;
	const bool quad3d_isFacingCameraY(const string& ID) const;
	const bool quad3d_isDepthMapIncluded(const string& ID) const;
	const bool quad3d_isShadowed(const string& ID) const;
	const bool quad3d_isReflected(const string& ID) const;
	const bool quad3d_isBright(const string& ID) const;
	const bool quad3d_isWireframed(const string& ID) const;
	const bool quad3d_hasDiffuseMap(const string& ID) const;
	const bool quad3d_hasEmissionMap(const string& ID) const;
	const bool quad3d_isFrozen(const string& ID) const;

	void text3d_create(const string& ID, const string& fontMapPath, bool isCentered);
	void text3d_delete(const string& ID);
	void text3d_deleteAll();
	void text3d_setContent(const string& ID, const string& value, float charWidth = -1.0f, float charHeight = -1.0f);
	void text3d_setPosition(const string& ID, const fvec3& value);
	void text3d_setRotation(const string& ID, const fvec3& value);
	void text3d_setSize(const string& ID, const fvec2& size);
	void text3d_move(const string& ID, const fvec3& change);
	void text3d_rotate(const string& ID, const fvec3& change);
	void text3d_scale(const string& ID, const fvec2& change);
	void text3d_moveTo(const string& ID, const fvec3& target, float speed);
	void text3d_rotateTo(const string& ID, const fvec3& target, float speed);
	void text3d_scaleTo(const string& ID, const fvec2& target, float speed);
	void text3d_setColor(const string& ID, const fvec3& value);
	void text3d_setWireframeColor(const string& ID, const fvec3& value);
	void text3d_setMinHeight(const string& ID, float value);
	void text3d_setMaxHeight(const string& ID, float value);
	void text3d_setLightness(const string& ID, float value);
	void text3d_setTransparency(const string& ID, float value);
	void text3d_setVisible(const string& ID, bool value);
	void text3d_setFacingCameraX(const string& ID, bool value);
	void text3d_setFacingCameraY(const string& ID, bool value);
	void text3d_setDepthMapIncluded(const string& ID, bool value);
	void text3d_setShadowed(const string& ID, bool value);
	void text3d_setReflected(const string& ID, bool value);
	void text3d_setBright(const string& ID, bool value);
	void text3d_setWireframed(const string& ID, bool value);
	void text3d_setFrozen(const string& ID, bool value);

	const vector<string> text3d_getIDs() const;
	const string& text3d_getFontMapPath(const string& ID) const;
	const string& text3d_getContent(const string& ID) const;
	const fvec3& text3d_getPosition(const string& ID) const;
	const fvec3& text3d_getRotation(const string& ID) const;
	const fvec3& text3d_getColor(const string& ID) const;
	const fvec3& text3d_getWireframeColor(const string& ID) const;
	const fvec2& text3d_getSize(const string& ID) const;
	const fvec2& text3d_getUvMultiplier(const string& ID) const;
	const fvec2& text3d_getUvOffset(const string& ID) const;
	const float text3d_getLightness(const string& ID) const;
	const float text3d_getMinHeight(const string& ID) const;
	const float text3d_getMaxHeight(const string& ID) const;
	const float text3d_getTransparency(const string& ID) const;
	const bool text3d_isExisting(const string& ID) const;
	const bool text3d_isVisible(const string& ID) const;
	const bool text3d_isFacingCameraX(const string& ID) const;
	const bool text3d_isFacingCameraY(const string& ID) const;
	const bool text3d_isDepthMapIncluded(const string& ID) const;
	const bool text3d_isShadowed(const string& ID) const;
	const bool text3d_isReflected(const string& ID) const;
	const bool text3d_isBright(const string& ID) const;
	const bool text3d_isWireframed(const string& ID) const;
	const bool text3d_isFrozen(const string& ID) const;
	const bool text3d_hasFontMap(const string& ID) const;

	void quad2d_create(const string& ID, bool isCentered);
	void quad2d_delete(const string& ID);
	void quad2d_deleteAll();
	void quad2d_setVisible(const string& ID, bool value);
	void quad2d_setDiffuseMap(const string& ID, const string& value);
	void quad2d_setColor(const string& ID, const fvec3& value);
	void quad2d_setTransparency(const string& ID, float value);
	void quad2d_setMinPosition(const string& ID, const fvec2& value);
	void quad2d_setMaxPosition(const string& ID, const fvec2& value);
	void quad2d_setPosition(const string& ID, const fvec2& value);
	void quad2d_setRotation(const string& ID, float value);
	void quad2d_setSize(const string& ID, const fvec2& value);
	void quad2d_move(const string& ID, const fvec2& position);
	void quad2d_rotate(const string& ID, float rotation);
	void quad2d_scale(const string& ID, const fvec2& size);
	void quad2d_moveTo(const string& ID, const fvec2& target, float speed);
	void quad2d_rotateTo(const string& ID, float target, float speed);
	void quad2d_scaleTo(const string& ID, const fvec2& target, float speed);
	void quad2d_setHorizontallyMirrored(const string& ID, bool value);
	void quad2d_setVerticallyMirrored(const string& ID, bool value);
	void quad2d_setWireframed(const string& ID, bool value);
	void quad2d_setWireframeColor(const string& ID, const fvec3& value);
	void quad2d_setUvMultiplier(const string& ID, const fvec2& value);
	void quad2d_setUvOffset(const string& ID, const fvec2& value);

	const vector<string> quad2d_getIDs() const;
	const string& quad2d_getDiffuseMapPath(const string& ID) const;
	const fvec3& quad2d_getWireframeColor(const string& ID) const;
	const fvec3& quad2d_getColor(const string& ID) const;
	const fvec2& quad2d_getPosition(const string& ID) const;
	const fvec2& quad2d_getSize(const string& ID) const;
	const fvec2& quad2d_getMinPosition(const string& ID) const;
	const fvec2& quad2d_getMaxPosition(const string& ID) const;
	const fvec2& quad2d_getUvMultiplier(const string& ID) const;
	const fvec2& quad2d_getUvOffset(const string& ID) const;
	const float quad2d_getRotation(const string& ID) const;
	const float quad2d_getTransparency(const string& ID) const;
	const bool quad2d_isExisting(const string& ID) const;
	const bool quad2d_isVisible(const string& ID) const;
	const bool quad2d_isCentered(const string& ID) const;
	const bool quad2d_isHorizontallyMirrored(const string& ID) const;
	const bool quad2d_isVerticallyMirrored(const string& ID) const;
	const bool quad2d_hasDiffuseMap(const string& ID) const;
	const bool quad2d_isWireframed(const string& ID) const;

	void text2d_create(const string& ID, const string& fontMapPath, bool isCentered);
	void text2d_delete(const string& ID);
	void text2d_deleteAll();
	void text2d_setVisible(const string& ID, bool value);
	void text2d_setContent(const string& ID, const string& value, float charWidth = -1.0f, float charHeight = -1.0f);
	void text2d_setColor(const string& ID, const fvec3& value);
	void text2d_setTransparency(const string& ID, float value);
	void text2d_setMinPosition(const string& ID, const fvec2& value);
	void text2d_setMaxPosition(const string& ID, const fvec2& value);
	void text2d_setPosition(const string& ID, const fvec2& value);
	void text2d_setRotation(const string& ID, float value);
	void text2d_setSize(const string& ID, const fvec2& value);
	void text2d_move(const string& ID, const fvec2& position);
	void text2d_rotate(const string& ID, float rotation);
	void text2d_scale(const string& ID, const fvec2& size);
	void text2d_moveTo(const string& ID, const fvec2& target, float speed);
	void text2d_rotateTo(const string& ID, float target, float speed);
	void text2d_scaleTo(const string& ID, const fvec2& target, float speed);
	void text2d_setHorizontallyMirrored(const string& ID, bool value);
	void text2d_setVerticallyMirrored(const string& ID, bool value);
	void text2d_setWireframed(const string& ID, bool value);
	void text2d_setWireframeColor(const string& ID, const fvec3& value);

	const vector<string> text2d_getIDs() const;
	const string& text2d_getFontMapPath(const string& ID) const;
	const string& text2d_getContent(const string& ID) const;
	const fvec3& text2d_getColor(const string& ID) const;
	const fvec3& text2d_getWireframeColor(const string& ID) const;
	const fvec2& text2d_getPosition(const string& ID) const;
	const fvec2& text2d_getSize(const string& ID) const;
	const fvec2& text2d_getMinPosition(const string& ID) const;
	const fvec2& text2d_getMaxPosition(const string& ID) const;
	const float text2d_getRotation(const string& ID) const;
	const float text2d_getTransparency(const string& ID) const;
	const bool text2d_isExisting(const string& ID) const;
	const bool text2d_isVisible(const string& ID) const;
	const bool text2d_isCentered(const string& ID) const;
	const bool text2d_isHorizontallyMirrored(const string& ID) const;
	const bool text2d_isVerticallyMirrored(const string& ID) const;
	const bool text2d_isWireframed(const string& ID) const;
	const bool text2d_hasFontMap(const string& ID) const;

	void aabb_create(const string& ID, bool isCentered);
	void aabb_delete(const string& ID);
	void aabb_deleteAll();
	void aabb_setParentEntityID(const string& ID, const string& value);
	void aabb_setParentEntityType(const string& ID, AabbParentEntityType value);
	void aabb_setVisible(const string& ID, bool value);
	void aabb_setColor(const string& ID, const fvec3& value);
	void aabb_setRaycastResponsive(const string& ID, bool value);
	void aabb_setCollisionResponsive(const string& ID, bool value);
	void aabb_setFollowParentTransformation(const string& ID, bool value);
	void aabb_setFollowParentVisibility(const string& ID, bool value);
	void aabb_setLocalPosition(const string& ID, const fvec3& value);
	void aabb_setLocalSize(const string& ID, const fvec3& value);
	void aabb_setBasePosition(const string& ID, const fvec3& value);
	void aabb_setBaseSize(const string& ID, const fvec3& value);
	void aabb_move(const string& ID, const fvec3& change);
	void aabb_scale(const string& ID, const fvec3& change);
	void aabb_moveTo(const string& ID, const fvec3& target, float speed);
	void aabb_scaleTo(const string& ID, const fvec3& target, float speed);

	const vector<string> aabb_getChildIDs(const string& parentID, AabbParentEntityType parentEntityType) const;
	const vector<string> aabb_getIDs() const;
	const string& aabb_getParentEntityID(const string& ID) const;
	const fvec3& aabb_getPosition(const string& ID) const;
	const fvec3& aabb_getSize(const string& ID) const;
	const fvec3& aabb_getColor(const string& ID) const;
	const bool aabb_isRaycastResponsive(const string& ID) const;
	const bool aabb_isCollisionResponsive(const string& ID) const;
	const bool aabb_isExisting(const string& ID) const;
	const bool aabb_isVisible(const string& ID) const;
	const bool aabb_hasParent(const string& ID) const;
	const AabbParentEntityType aabb_getParentEntityType(const string& ID) const;

	void pointlight_create(const string& ID);
	void pointlight_delete(const string& ID);
	void pointlight_deleteAll();
	void pointlight_setVisible(const string& ID, bool value);
	void pointlight_setPosition(const string& ID, const fvec3& value);
	void pointlight_move(const string& ID, const fvec3& change);
	void pointlight_moveTo(const string& ID, const fvec3& target, float speed);
	void pointlight_setRadius(const string& ID, const fvec3& value);
	void pointlight_setColor(const string& ID, const fvec3& value);
	void pointlight_setIntensity(const string& ID, float value);
	void pointlight_setShape(const string& ID, PointlightShape value);

	const vector<string> pointlight_getIDs() const;
	const fvec3& pointlight_getPosition(const string& ID) const;
	const fvec3& pointlight_getRadius(const string& ID) const;
	const fvec3& pointlight_getColor(const string& ID) const;
	const float pointlight_getIntensity(const string& ID) const;
	const bool pointlight_isExisting(const string& ID) const;
	const bool pointlight_isVisible(const string& ID) const;
	const PointlightShape pointlight_getShape(const string& ID) const;

	void spotlight_create(const string& ID);
	void spotlight_delete(const string& ID);
	void spotlight_deleteAll();
	void spotlight_setVisible(const string& ID, bool value);
	void spotlight_setPosition(const string& ID, const fvec3& value);
	void spotlight_move(const string& ID, const fvec3& change);
	void spotlight_moveTo(const string& ID, const fvec3& target, float speed);
	void spotlight_setColor(const string& ID, const fvec3& value);
	void spotlight_setYaw(const string& ID, float value);
	void spotlight_setPitch(const string& ID, float value);
	void spotlight_setIntensity(const string& ID, float value);
	void spotlight_setAngle(const string& ID, float value);
	void spotlight_setDistance(const string& ID, float value);

	const vector<string> spotlight_getIDs() const;
	const fvec3& spotlight_getPosition(const string& ID) const;
	const fvec3& spotlight_getFrontVector(const string& ID) const;
	const fvec3& spotlight_getColor(const string& ID) const;
	const float spotlight_getYaw(const string& ID) const;
	const float spotlight_getPitch(const string& ID) const;
	const float spotlight_getIntensity(const string& ID) const;
	const float spotlight_getAngle(const string& ID) const;
	const float spotlight_getDistance(const string& ID) const;
	const bool spotlight_isExisting(const string& ID) const;
	const bool spotlight_isVisible(const string& ID) const;

	void reflection_create(const string& ID);
	void reflection_delete(const string& ID);
	void reflection_deleteAll();
	void reflection_setVisible(const string& ID, bool value);
	void reflection_setPosition(const string& ID, const fvec3& value);
	void reflection_move(const string& ID, const fvec3& change);
	void reflection_moveTo(const string& ID, const fvec3& target, float speed);
	void reflection_capture(const string& ID);

	const vector<string> reflection_getIDs() const;
	const fvec3& reflection_getPosition(const string& ID) const;
	const bool reflection_isExisting(const string& ID) const;
	const bool reflection_isVisible(const string& ID) const;

	void sound2d_create(const string& ID, const string& audioPath);
	void sound2d_delete(const string& ID);
	void sound2d_deleteAll();
	void sound2d_start(const string& ID, int playCount, unsigned int fadeMS, bool mustForce);
	void sound2d_pause(const string& ID);
	void sound2d_pauseAll();
	void sound2d_resume(const string& ID);
	void sound2d_resumeAll();
	void sound2d_stop(const string& ID, unsigned int fadeMS);
	void sound2d_stopAll();
	void sound2d_setVolume(const string& ID, float value);

	const vector<string> sound2d_getIDs() const;
	const string& sound2d_getAudioPath(const string& ID) const;
	const float sound2d_getVolume(const string& ID) const;
	const bool sound2d_isExisting(const string& ID) const;
	const bool sound2d_isStarted(const string& ID) const;
	const bool sound2d_isPlaying(const string& ID) const;
	const bool sound2d_isPaused(const string& ID) const;

	void sound3d_create(const string& ID, const string& audioPath);
	void sound3d_delete(const string& ID);
	void sound3d_deleteAll();
	void sound3d_start(const string& ID, int playCount, unsigned int fadeMS, bool mustForce);
	void sound3d_pause(const string& ID);
	void sound3d_pauseAll();
	void sound3d_resume(const string& ID);
	void sound3d_resumeAll();
	void sound3d_stop(const string& ID, unsigned int fadeMS);
	void sound3d_stopAll();
	void sound3d_setPosition(const string& ID, const fvec3& value);
	void sound3d_move(const string& ID, const fvec3& change);
	void sound3d_moveTo(const string& ID, const fvec3& target, float speed);
	void sound3d_setMaxVolume(const string& ID, float value);
	void sound3d_setMaxDistance(const string& ID, float value);

	const vector<string> sound3d_getIDs() const;
	const string& sound3d_getAudioPath(const string& ID) const;
	const fvec3& sound3d_getPosition(const string& ID) const;
	const float sound3d_getMaxDistance(const string& ID) const;
	const float sound3d_getVolume(const string& ID) const;
	const float sound3d_getMaxVolume(const string& ID) const;
	const bool sound3d_isExisting(const string& ID) const;
	const bool sound3d_isStarted(const string& ID) const;
	const bool sound3d_isPlaying(const string& ID) const;
	const bool sound3d_isPaused(const string& ID) const;

	void input_setLocked(bool locked);

	const int input_getMouseWheelX() const;
	const int input_getMouseWheelY() const;
	const bool input_isLocked() const;
	const bool input_isKeyDown(InputType key) const;
	const bool input_isKeyPressed(InputType key) const;
	const bool input_isMouseDown(InputType button) const;
	const bool input_isMousePressed(InputType button) const;

	void camera_reset();
	void camera_enableFirstPersonView(float initialYaw, float initialPitch);
	void camera_enableThirdPersonView(float initialYaw, float initialPitch);
	void camera_disableFirstPersonView();
	void camera_disableThirdPersonView();
	void camera_moveFollowX(float speed);
	void camera_moveFollowZY(float speed);
	void camera_moveFollowZ(float speed);
	void camera_move(const fvec3& speed);
	void camera_setPosition(const fvec3& value);
	void camera_setThirdPersonLookat(const fvec3& value);
	void camera_setThirdPersonDistance(float value);
	void camera_setFOV(float value);
	void camera_setYaw(float value);
	void camera_setPitch(float value);
	void camera_setMinFirstPersonPitch(float value);
	void camera_setMaxFirstPersonPitch(float value);
	void camera_setMinThirdPersonPitch(float value);
	void camera_setMaxThirdPersonPitch(float value);
	void camera_setCursorSensitivity(float value);

	const fvec3& camera_getPosition() const;
	const fvec3& camera_getUpVector() const;
	const fvec3& camera_getFrontVector() const;
	const fvec3& camera_getRightVector() const;
	const fvec3& camera_getThirdPersonLookat() const;
	const float camera_getFOV() const;
	const float camera_getCursorSensitivity() const;
	const float camera_getYaw() const;
	const float camera_getPitch() const;
	const float camera_getFirstPersonYaw() const;
	const float camera_getFirstPersonPitch() const;
	const float camera_getMinFirstPersonPitch() const;
	const float camera_getMaxFirstPersonPitch() const;
	const float camera_getThirdPersonYaw() const;
	const float camera_getThirdPersonPitch() const;
	const float camera_getMinThirdPersonPitch() const;
	const float camera_getMaxThirdPersonPitch() const;
	const float camera_getThirdPersonDistance() const;
	const float camera_getNearDistance() const;
	const float camera_getFarDistance() const;
	const bool camera_isThirdPersonViewEnabled() const;
	const bool camera_isFirstPersonViewEnabled() const;

	void collision_setCameraBox(float left, float right, float bottom, float top, float back, float front);
	void collision_enableCameraResponse(bool x, bool y, bool z);
	void collision_enableTerrainResponse(float cameraHeight, float cameraSpeed);
	void collision_disableCameraResponse();
	void collision_disableTerrainResponse();

	const string collision_checkCameraWithAny() const;
	const string collision_checkCameraWithEntities(const string& ID) const;
	const string collision_checkEntityWithEntities(const string& selfID, const string& otherID) const;
	const bool collision_checkCameraWithTerrain() const;
	const bool collision_checkCameraWithEntity(const string& ID) const;
	const bool collision_checkCameraWithEntityDirection(const string& ID, Direction direction) const;
	const bool collision_checkCameraWithAnyDirection(Direction direction) const;
	const bool collision_checkCameraWithEntitiesDirection(const string& ID, Direction direction) const;
	const bool collision_isCameraResponseEnabled() const;
	const bool collision_isTerrainResponseEnabled() const;

	void raycast_enableTerrainPointing(float distance, float precision);
	void raycast_disableTerrainPointing();

	const pair<const string, float> raycast_checkCursorInAny();
	const pair<const string, float> raycast_checkCursorInEntities(const string& ID, bool canBeOccluded);
	const pair<bool, float> raycast_checkCursorInEntity(const string& ID, bool canBeOccluded);
	const fvec3& raycast_getPointOnTerrain() const;
	const bool raycast_isPointOnTerrainValid() const;
	const bool raycast_isTerrainPointingEnabled() const;
	const Ray& raycast_getCursorRay() const;

	void gfx_enableAmbientLighting();
	void gfx_enableDirectionalLighting();
	void gfx_enableFog();
	void gfx_enableAntiAliasing();
	void gfx_enableShadows();
	void gfx_enableBloom();
	void gfx_enableSkyExposure();
	void gfx_enableDOF();
	void gfx_enableMotionBlur();
	void gfx_enableLensFlare();
	void gfx_disableAmbientLighting(bool mustResetProperties);
	void gfx_disableDirectionalLighting(bool mustResetProperties);
	void gfx_disableFog(bool mustResetProperties);
	void gfx_disableAntiAliasing(bool mustResetProperties);
	void gfx_disableShadows(bool mustResetProperties);
	void gfx_disableBloom(bool mustResetProperties);
	void gfx_disableSkyExposure(bool mustResetProperties);
	void gfx_disableDOF(bool mustResetProperties);
	void gfx_disableMotionBlur(bool mustResetProperties);
	void gfx_disableLensFlare(bool mustResetProperties);
	void gfx_setCubeReflectionQuality(unsigned int value);
	void gfx_setPlanarReflectionQuality(unsigned int value);
	void gfx_setPlanarRefractionQuality(unsigned int value);
	void gfx_setAnisotropicFilteringQuality(unsigned int value);
	void gfx_setAmbientLightingColor(const fvec3& value);
	void gfx_setAmbientLightingIntensity(float value);
	void gfx_setDirectionalLightingPosition(const fvec3& value);
	void gfx_setDirectionalLightingColor(const fvec3& value);
	void gfx_setDirectionalLightingIntensity(float value);
	void gfx_setFogColor(const fvec3& value);
	void gfx_setFogThickness(float value);
	void gfx_setFogMinDistance(float value);
	void gfx_setFogMaxDistance(float value);
	void gfx_setShadowEyePosition(const fvec3& value);
	void gfx_setShadowCenterPosition(const fvec3& value);
	void gfx_setShadowSize(float value);
	void gfx_setShadowReach(float value);
	void gfx_setShadowLightness(float value);
	void gfx_setShadowQuality(unsigned int value);
	void gfx_setShadowInterval(unsigned int value);
	void gfx_setShadowFollowingCamera(bool value);
	void gfx_setBloomIntensity(float value);
	void gfx_setBloomBlurCount(unsigned int value);
	void gfx_setBloomType(BloomType value);
	void gfx_setBloomQuality(unsigned int value);
	void gfx_setSkyExposureIntensity(float value);
	void gfx_setSkyExposureSpeed(float value);
	void gfx_setDofDynamicDistance(float value);
	void gfx_setDofBlurDistance(float value);
	void gfx_setDofDynamic(bool value);
	void gfx_setDofQuality(unsigned int value);
	void gfx_setMotionBlurStrength(float value);
	void gfx_setMotionBlurQuality(unsigned int value);
	void gfx_setLensFlareMap(const string& value);
	void gfx_setLensFlareIntensity(float value);
	void gfx_setLensFlareSensitivity(float value);
	void gfx_setPlanarReflectionHeight(float value);

	const string& gfx_getLensFlareMapPath() const;
	const fvec3& gfx_getDirectionalLightingPosition() const;
	const fvec3& gfx_getAmbientLightingColor() const;
	const fvec3& gfx_getDirectionalLightingColor() const;
	const fvec3& gfx_getFogColor() const;
	const fvec3& gfx_getShadowEyePosition() const;
	const fvec3& gfx_getShadowCenterPosition() const;
	const float gfx_getAmbientLightingIntensity() const;
	const float gfx_getDirectionalLightingIntensity() const;
	const float gfx_getFogMinDistance() const;
	const float gfx_getFogMaxDistance() const;
	const float gfx_getFogThickness() const;
	const float gfx_getPlanarReflectionHeight() const;
	const float gfx_getShadowSize() const;
	const float gfx_getShadowReach() const;
	const float gfx_getShadowLightness() const;
	const float gfx_getBloomIntensity() const;
	const float gfx_getSkyExposureIntensity() const;
	const float gfx_getSkyExposureSpeed() const;
	const float gfx_getDofDynamicDistance() const;
	const float gfx_getDofBlurDistance() const;
	const float gfx_getLensFlareIntensity() const;
	const float gfx_getLensFlareSensitivity() const;
	const float gfx_getMotionBlurStrength() const;
	const unsigned int gfx_getBloomQuality() const;
	const unsigned int gfx_getDofQuality() const;
	const unsigned int gfx_getMotionBlurQuality() const;
	const unsigned int gfx_getAnisotropicFilteringQuality() const;
	const unsigned int gfx_getShadowQuality() const;
	const unsigned int gfx_getCubeReflectionQuality() const;
	const unsigned int gfx_getPlanarReflectionQuality() const;
	const unsigned int gfx_getPlanarRefractionQuality() const;
	const unsigned int gfx_getBloomBlurCount() const;
	const unsigned int gfx_getShadowInterval() const;
	const bool gfx_isAntiAliasingEnabled() const;
	const bool gfx_isAmbientLightingEnabled() const;
	const bool gfx_isDirectionalLightingEnabled() const;
	const bool gfx_isFogEnabled() const;
	const bool gfx_isBloomEnabled() const;
	const bool gfx_isSkyExposureEnabled() const;
	const bool gfx_isShadowsEnabled() const;
	const bool gfx_isDofEnabled() const;
	const bool gfx_isDofDynamic() const;
	const bool gfx_isMotionBlurEnabled() const;
	const bool gfx_isLensFlareEnabled() const;
	const bool gfx_isShadowFollowingCamera() const;
	const bool gfx_hasLensFlareMap() const;
	const BloomType gfx_getBloomType() const;

	void server_start(unsigned int maxClientCount);
	void server_sendTcpMessage(const string& username, const string& content);
	void server_sendUdpMessage(const string& username, const string& content);
	void server_broadcastTcpMessage(const string& content, const string& exceptionUsername);
	void server_broadcastUdpMessage(const string& content, const string& exceptionUsername);
	void server_disconnectClient(const string& username);
	void server_disconnectClients();
	void server_stop();

	const vector<NetworkingClientMessage> server_getPendingMessages() const;
	const vector<string> server_getClientIPs() const;
	const vector<string> server_getClientUsernames() const;
	const string server_getNewClientIP() const;
	const string server_getNewClientUsername() const;
	const string server_getOldClientIP() const;
	const string server_getOldClientUsername() const;
	const bool server_isRunning() const;
	const bool server_isClientConnected(const string& username) const;

	void client_start(const string& username);
	void client_connect(const string& serverIP);
	void client_sendTcpMessage(const string& content);
	void client_sendUdpMessage(const string& content);
	void client_disconnect();
	void client_stop();

	const vector<NetworkingServerMessage> client_getPendingMessages() const;
	const string client_getUsername() const;
	const string client_getServerIP() const;
	const unsigned int client_getPingLatency() const;
	const bool client_isValidServerIP(const string& serverIP) const;
	const bool client_isRunning() const;
	const bool client_isConnecting() const;
	const bool client_isConnected() const;
	const bool client_isAccepted() const;

	void misc_enableWireframeRendering();
	void misc_enableShadowFrameRendering();
	void misc_enableAabbFrameRendering();
	void misc_enableVsync();
	void misc_disableWireframeRendering();
	void misc_disableShadowFrameRendering();
	void misc_disableAabbFrameRendering();
	void misc_disableVsync();
	void misc_setCursorVisible(bool value);
	void misc_setCursorEntityID(const string& value);
	void misc_centerCursor();
	void misc_setCursorPosition(const ivec2& value);
	void misc_setWindowTitle(const string& value);
	void misc_cacheMesh(const string& filePath);
	void misc_cacheImage(const string& filePath);
	void misc_cacheAudio(const string& filePath);
	void misc_cacheMeshes(const vector<string>& filePaths);
	void misc_cacheImages(const vector<string>& filePaths);
	void misc_cacheAudios(const vector<string>& filePaths);
	void misc_clearMeshCache(const string& filePath);
	void misc_clearImageCache(const string& filePath);
	void misc_clearAudioCache(const string& filePath);
	void misc_clearMeshesCache();
	void misc_clearImagesCache();
	void misc_clearAudiosCache();
	void misc_startMillisecondTimer();

	const vector<pair<string, int>> misc_getUpdateProfilingStatistics() const;
	const vector<pair<string, int>> misc_getRenderProfilingStatistics() const;
	const string misc_getCursorEntityID() const;
	const string misc_getCpuName() const;
	const string misc_getGpuName() const;
	const string misc_getOpenglVersion() const;
	const ivec2 misc_getCursorPosition() const;
	const ivec2 misc_getCursorPositionRelativeToViewport() const;
	const float misc_getFPS() const;
	const float misc_stopMillisecondTimer() const;
	const unsigned int misc_getTriangleCount() const;
	const bool misc_isCursorVisible() const;
	const bool misc_isCursorInsideViewport() const;
	const bool misc_isCursorInsideWindow() const;
	const bool misc_checkInterval(unsigned int ticks) const;
	const bool misc_isMillisecondTimerStarted() const;
	const bool misc_isVsyncEnabled() const;
	const bool misc_isWireframeRenderingEnabled() const;
	const bool misc_isShadowFrameRenderingEnabled() const;
	const bool misc_isAabbFrameRenderingEnabled() const;

private:
	shared_ptr<EngineCore> _core = nullptr;

	string _hoveredAabbID = "";

	float _hoveredAabbDistance = -1.0f;

	bool _isRaycastUpdated = false;
};